[buildout]
extends =
		 versions.cfg
		 pillow.cfg
		 recipes.cfg

update-versions-file = versions.cfg
show-picked-versions = true

# python_ldap and related can move.
parts =
		cython
		lxml
		pillow
		eggs
		checkversions

# Using 'true' causes issues with file templates and extra Z3C_RECIPE_FILETEMPLATE_BASE
# not being interpreted
relative-paths = false

# By default, buildout checks for
# updated eggs when the requirements
# specify no version or >=. This can
# be fairly slow if most requirements are
# unpinned. Setting newest to false
# makes this not happen. The command line
# arg -n can make it happen again
newest = false

# We manage our checkouts using mr.developer, which
# easily allows pinning versions (revision=XXX)
# and provides the 'develop' command with many
# useful actions (like 'rebuild)
# See https://pypi.python.org/pypi/mr.developer/
extensions = mr.developer
mr.developer-threads = 10
sources-dir = sources
auto-checkout = *
# always-checkout =
# This defaults to false. If it's true, then all packages specified by
# auto-checkout and currently in develop mode are updated during each
# buildout run. If set to force, then packages are updated even when
# they are dirty instead of asking interactively.

[base-sources]
nti.qa.common = svn https://repos.nextthought.com/svn/nti-svn/nti.qa.common/trunk${server-versions:All}

[server-versions]
# This section can be used to define version pins
# for mr.developer. Currently, we define one version
# pin for all components, as that's the safest way to be sure
# we have a matching set of components that work together.
# We also only define a version pin for the SVN repository,
# as the git components are non-critical (not used at runtime)
# or slow-changinge
# All = @33001
All =

[sources]
<= base-sources

[cython]
recipe = zc.recipe.egg
# Need to include cython so it gets
# on the path and can be used by lxml
# and gevent. This needs to happen
# in a separate part so the scripts
# exist.
eggs =
	cython

[deployment]
root-directory = ${buildout:directory}

[lxml]
# A build of lxml that uses local libxml2 and libxslt
# for repeatability and to better work without
# having -dev packages installed.
# NOTE: Under OS X, version 0.9 of this recipe has an incompatibility
# with recent lxml versions. For details and a workaround,
# see https://github.com/seletz/z3c.recipe.staticlxml/issues/9
# libxml2 (2.9.3, 2.9.4) has issues installing under osx.
recipe = z3c.recipe.staticlxml
# If this exact version was already present
# in buildout-eggs, it won't be rebuilt
egg = lxml==3.8.0
libxml2-url = http://xmlsoft.org/sources/libxml2-2.9.4.tar.gz
libxslt-url = http://xmlsoft.org/sources/libxslt-1.1.29.tar.gz

[eggs]
recipe = zc.recipe.egg
dataserver_egg = nti.dataserver[tools]
# pycrypto is an optional dependency for
# some of the password salts. since we need
# it for the recipe anyway, add it here too
eggs =
	 cython
	 pycrypto
	 pillow
	 pip
	 ${:dataserver_egg}
interpreter = python
# Note that when scripts are installed,
# the order is not knowable. Thus it is not
# possible for one egg to reliable override
# a script from another egg, without
# explicitly listing exactly which scripts (from all
# eggs) to install. That is a large list, so
# we just need to make sure we don't have conflicts
# in names.
dependent-scripts = true
# Make sure all these scripts know where their
# home is, and that it is a buildout
initialization =
				import os
				os.environ['DATASERVER_DIR_IS_BUILDOUT'] = "1"
				os.environ['DATASERVER_DIR'] = "${deployment:root-directory}"
				os.environ['DATASERVER_ETC_DIR'] = "${deployment:etc-directory}"
				os.environ['DATASERVER_DATA_DIR'] = "${deployment:data-directory}"

[checkversions]
# Provides a 'checkversions' script
# that does the same thing as pip-review
# or pip list --outdated but for a buildout
recipe = zc.recipe.egg
eggs = z3c.checkversions [buildout]

[clean-pyc]
# Having .pyc or .pyo files around in develop eggs
# is dangerous if the source file was deleted. It
# can lead to things apparently working (e.g., imports,
# ZODB objects) that really won't on a fresh checkout.
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = find ${buildout:sources-dir} -name "*.py[co]" -delete

[omelette]
recipe = collective.recipe.omelette
eggs = ${eggs:eggs}
# By creating a flattened, non-namespaced directory of all installed
# packages, Omelette makes it easy to browse all code in one place. it
# also makes it easy to set a python path for PyDev and the like.
