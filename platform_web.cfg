[buildout]
extends =
		recipes.cfg
		environment.cfg
		logrotate.cfg
		prometheus.cfg
		nginx.cfg
		loginapp.cfg
		nodeapps_prod.cfg
		sites.cfg
		supervisor.cfg

parts =
		logrotate-conf
		logrotate-cron
		directories
		eggs
		supervisor
		nginx-conf
		nodeserver-env
		client-site-package-conf
		client-site-package
		linkbuilder
		default-asset-link

# We manage our checkouts using mr.developer, which
# easily allows pinning versions (revision=XXX)
# and provides the 'develop' command with many
# useful actions (like 'rebuild)
# See https://pypi.python.org/pypi/mr.developer/
extensions = mr.developer
mr.developer-threads = 35
sources-dir = sources
always-checkout = true
auto-checkout = *

[sources]
<= recipes-sources
nti.deploymenttools.scripts = git git@github.com:NextThought/nti.deploymenttools.scripts.git branch=master

[eggs]
recipe = zc.recipe.egg
eggs =
	 nti.deploymenttools.scripts
interpreter = python
# Note that when scripts are installed,
# the order is not knowable. Thus it is not
# possible for one egg to reliable override
# a script from another egg, without
# explicitly listing exactly which scripts (from all
# eggs) to install. That is a large list, so
# we just need to make sure we don't have conflicts
# in names.
dependent-scripts = true

[logrotate-cron]
logrotate-bin = /usr/sbin/logrotate

[on-site-logs-cron]
recipe = z3c.recipe.usercrontab
rsync-bin = /usr/bin/rsync
times = 5,20,35,50 * * * *
command = ${:rsync-bin} --numeric-ids -a "${deployment:log-directory}/" "logger1.nti::logs/$HOSTNAME/"

[off-site-logs-cron]
recipe = z3c.recipe.usercrontab
rsync-bin = /usr/bin/rsync
times = 10,25,40,55 * * * *
command = ${:rsync-bin} --numeric-ids -a "${deployment:log-directory}/" "10.50.30.64::logs/$HOSTNAME/"

[directories]
paths =
	  ${deployment:etc-directory}
	  ${deployment:run-directory}
	  ${deployment:log-directory}
	  ${deployment:cache-directory}/nginx

[node-service-env]
address = 0.0.0.0
analyticsKey =
dataserver-address =
dataserver-port = ${environment:haproxy_http_port}
login = /login/
openExternalPDFsInNewWindow = true
port = 8083

[nodeserver-env-keys-googleapi]
default =

[environment]
smtp_server = email-smtp.us-east-1.amazonaws.com
smtp_username = AKIAIOO43PY4ANWEYP2Q
smtp_port = 587
global_host_name =
global_content_directory = ${buildout:directory}/../DataserverGlobalLibrary
global_content_location = /content/

haproxy_http_port = 2080

# Because of the order of inclusion, we need this here
webapp_path = ${buildout:sources-dir}/nti.web.app
loginapp_path = ${buildout:sources-dir}/nti.web.login

# The prefix that the webapp occupies in the
# URL space. This MUST end with a trailing slash,
# and MUST not be empty
webapp_location = /app/

# The prefix that the login app occupies in the
# URL space. This MUST end with a trailing slash.
loginapp_location = /login/

[nginx-conf]
# Copy these things in from the environment; eventually
# they should move directly here; the extends keyword is a
# bad idea if there are many unrelated settings
global_host_name = ""
robots_file = robots.txt

nginx_ip = 0.0.0.0

[web-app-features]
kaltura.progressive = false
show-open-students-first = true

[client-site-package-conf]
recipe = nti.recipes.json
output-file = ${buildout:directory}/package.json
contents-section = client-site-package-conf-main

[client-site-package-conf-main]
name = nti-buildout
version = 0.0.1
description = NextThought Buildout NodeJS Library
author = NextThought
private = true
dependencies-section = client-site-package-conf-deps

[client-site-package-conf-deps]
@nti/client-sites-default = 1.1.0
@nti/environment-support = 2018.1.0
nti-lib-vendor = 2018.0.0
@nti/web-app = 2019.16.8
@nti/web-login = 2019.9.0
@nti/web-mobile = 2019.16.1
@nti/web-service = 1.28.0

[client-site-package]
recipe = collective.recipe.cmd
on_install = true
on_update = true
site-asset-package = ${buildout:root-directory}
cmds =
	 pushd ${:site-asset-package}
	 npm install
	 npm update
	 popd

[linkbuilder]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
	 ${buildout:bin-directory}/nti_client_linkbuilder --source ${buildout:root-directory}/node_modules --dest ${deployment:run-directory}/www/

[default-asset-link]
recipe = collective.recipe.cmd
on_install = true
on_update = false
cmds =
	 mkdir -p ${deployment:run-directory}/www/default-assets
	 pushd ${deployment:run-directory}/www/default-assets
	 ln -s ${environment:default_site_assets}/dist site-assets
	 popd

[node-supervisord]
node_exec = /usr/bin/node
node = 1 node ${:node_exec} [${deployment:root-directory}/node_modules/.bin/web-service --protocol proxy --env production --config ${deployment:root-directory}/etc/nodeserver-env.json]

[supervisor]
# Disable supervisord based log rotation because we have switched to using logrotate
logfile-maxbytes = 0
childstdout-logfile-maxbytes = 0
childstderr-logfile-maxbytes = 0
# Don't wipe away existing logs
nocleanup = True
eventlisteners =
groups =
programs =
        ${nginx-supervisord:nginx}
        ${node-supervisord:node}
        ${prometheus-supervisord:node_exporter}
