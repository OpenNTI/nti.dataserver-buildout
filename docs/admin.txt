nti.app.analytics

/dataserver2/analytics/empty_queue (POST) Empty all queued objects
/dataserver2/analytics/queue_info (GET) Return information about the queued objects
/dataserver2/analytics/user_research_stats (POST) Return information about the user research status

nti.app.assesment

/dataserver2/@@RemoveMatchedSavePoints - (POST,GET) Remove savepoint for already submitted assignment(s) for all courses

/dataserver2/@@UnmatchedSavePoints - (GET) Report all savepoints w/o a submission of either all courses or one course 
	params:
		 ntiid: Course/Catalog Entry NTIID 

/dataserver2/@@UnregisterAssessmentItems - (POST,GET) Unregister all assessment items of a content pacakge 
	params:
		 ntiid: Content package NTIID

/dataserver2/@@RegisterAssessmentItems - (POST,GET) Register all assessment items of a content pacakge
	params:
		 ntiid: Content package NTIID
		 
/dataserver2/CourseAdmin/CourseSubmissionReport - (GET) Return a report of all submission of a course 
	params:  
		ntiid: Course/Catalog Entry NTIID 
		username/usernames: Comma delimited user names
		assignmentId/assignment: Assignment NTIID 
		questionId/question: Question NTIID

/dataserver2/CourseAdmin/CourseAssignments - (GET) Return a assignments of a course
	params:  
		ntiid: Course/Catalog Entry NTIID
		
/dataserver2/CourseAdmin/CourseAssessmentItems - (GET) Return a assessment items of a course
	params:  
		ntiid: Course/Catalog Entry NTIID
		
/dataserver2/CourseAdmin/MoveUserAssignments
/dataserver2/CourseAdmin/MoveUserAssignmentsView - (POST, GET) Move assignments from one course to another
	params:  
		source: Course/Catalog Entry NTIID
		target: Course/Catalog Entry NTIID
		username/usernames: Comma delimited user names (optional)
		
nti.app.hypatia

/dataserver2/hypatia/reindex_content (POST) Reindex all content of a set of users
	params:  
		username/usernames: Comma delimited user names
		
/dataserver2/hypatia/process_queue (POST) Force index of all queued objects

/dataserver2/hypatia/empty_queue (POST) Empty all queued objects

/dataserver2/hypatia/queue_info (GET) Return information about the queued objects

/dataserver2/hypatia/sync_queue (POST) Sync all internal index queues

/dataserver2/hypatia/unindex_missing (POST) Unindex all broken or missing objects

nti.app.metadata

/dataserver2/metadata/mime_types (GET) Return the mime types of all cataloged objects

/dataserver2/metadata/reindex (POST) Reindex all objects of a set of users (params username/usernames, system)
	params:  
		username/usernames: Comma delimited user names
		system: Boolean to include system user objects (optional)

/dataserver2/metadata/process_queue (POST) Process indexation of all  objects

/dataserver2/metadata/queued_objects (GET) Return all queued objects

/dataserver2/metadata/sync_queue (POST) Sync all internal index queues

/dataserver2/metadata/check_indices (POST) Unindex all broken or missing objects

nti.app.products.badges

/dataserver2/BadgeAdmin/award (POST) award a badge
	params:
		username/email: Username or email
		badge: Badge name
		
/dataserver2/BadgeAdmin/revoke (POST) revoke a badge
	params:
		username/email: Username or email
		badge: Badge name
		
/dataserver2/BadgeAdmin/sync_db (POST) sync_db badge db with the local hosted_badge_images
	params:
		directory: hosted_badge_images directory (optional)
		update: Udate badge information (boolean optional)
		verify: Verify badge (boolean optional)
		secret: JSON web signature secret (optional)
		
/dataserver2/BadgeAdmin/bulk_import (POST) Import badges from a tab delimited source file
	params:
		source: source file

/dataserver2/BadgeAdmin/update_persons (POST) Update email for the tahir person database

/dataserver2/BadgeAdmin/AllBadges (GET) Return all badges in the database

nti.app.products.courseware

/dataserver2/CourseAdmin/UserCourseEnroll (POST) Enroll a user in a course
	params:
		ntiid: Course/Catalog entry NTIID
		username: Username
		scope: Scope name (optional Public default)

/dataserver2/CourseAdmin/UserCourseDrop (POST) Drop a user from a course
	params:
		ntiid: Course/Catalog entry NTIID
		username: Username

/dataserver2/CourseAdmin/DropAllCourseEnrollments (POST) Drop all enrollments from a course
	params:
		ntiid: Course/Catalog entry NTIID

/dataserver2/CourseAdmin/UserCourseEnrollments (GET) Return all enrollments of a user
	params:
		username: Username
		
/dataserver2/CourseAdmin/CourseEnrollmentMigrator (POST, GET) Migrates the enrollments from one course to antother
	params:
		source: Catalog entry ntiid
		target: Catalog entry ntiid

/dataserver2/CourseAdmin/CourseRoles (GET) Report all roles of all courses
	
/dataserver2/CourseAdmin/CourseEnrollments (GET) Report all course enrollments
	params:
		ntiid: Course/Catalog entry ntiid

/dataserver2/CourseAdmin/LegacyCourseTopicCreator (POST) create topics for a course
	
/dataserver2/CourseAdmin/LegacyCourseEnrollmentMigrator (POST) Migrates the enrollments from legacy courses

/dataserver2/CourseAdmin/AllEnrollments.csv (GET) Provides a downloadable table of all the enrollments present in the system

/dataserver2/++path++to++course/Enrollments.csv (GET) Provides a downloadable table of all the enrollments in the course
/dataserver2/++path++to++catalog++entry++/Enrollments.csv (GET) Provides a downloadable table of all the enrollments in the course

nti.app.products.courseware_badges

/dataserver2/BadgeAdmin/CourseBadgeCache (GET) Return the Course badge cache
	
/dataserver2/BadgeAdmin/ResetCourseBadgeCache (POST) Clear the Course badge cache

/dataserver2/BadgeAdmin/RebuildCourseBadgeCache (POST) Reset and Rebuild the Course badge cache

/dataserver2/BadgeAdmin/UserCourseBadges (GET) Return the badges for the courses a user in enrolled in
	params:
		username: username 

nti.app.products.courseware_ims

/dataserver2/IMS/nti_enrollment (POST) Enroll users through an IMS feed
	params:
		ims: IMS source file (e.g. OU/OKState)
	
/dataserver2/IMS/nti_create_users (POST) Create users from an IMS feed
	params:
		ims: IMS source file (e.g. OU/OKState)

/dataserver2/IMS/nti_courses (GET) Return IMS capable courses
	params:
		all: Boolean to return all courses (Optional)

nti.app.products.courseware_store

/dataserver2/IMS/nti_enrollment (POST) Enroll users through an IMS feed
	params:
		ims: IMS source file (e.g. OU/OKState)
	
/dataserver2/IMS/nti_create_users (POST) Create users from an IMS feed
	params:
		ims: IMS source file (e.g. OU/OKState)

/dataserver2/@@VendorUpdatesPurchasedCourse (GET) Return the users who have selected to recieve vendor updates
	params:
		ntiid: Course/Catalog entry NTIID

nti.app.products.courseware_reports

/dataserver2/@@shared_notes (GET) Return a table of shared_note count by course.

/dataserver2/@@whitelist_participation (POST) Return the participation of students found in a whitelist
	params:
		CSV of email addresses:
	headers:
		NTcourse: Course name
		
/dataserver2/@@InstructorParticipation (GET) Iterates the catalog and produces instructor participation stats for each instructor in each course
	params:
		start_time: Start time
		usernames: space delimted usernames
		
nti.app.products.gradebook
		
/dataserver2/CourseAdmin/CourseGrades (GET) Return the course grades
	params:
		ntiid: Course/Catalog NTIID
		username/usernames: Comma delimted usernames (Optional)

/dataserver2/CourseAdmin/SynchronizeGradebook (POST) Synchronize a course gradebook
	params:
		ntiid: Course/Catalog NTIID

nti.app.products.ou
		
/dataserver2/janux/ou_set_user_attributes (POST) Set the OU LDAP attributes for users
	params:
		username/usernames: Comma delimted usernames (Optional)

/dataserver2/janux/UsersInterestedInCredit.csv (GET) Return a table with users interested in credit
	
/dataserver2/janux/AllowVendorUpdates.csv (GET) Return a table with users that allow vendor updates (Purchasea and FiveMinute)

/dataserver2/janux/nti_enrollment (POST) Enroll users through an IMS feed
	params:
		ims: IMS source file 
	
/dataserver2/janux/nti_create_users (POST) Create users from an IMS feed
	params:
		ims: IMS source file 

/dataserver2/janux/nti_courses (GET) Return IMS capable courses
	params:
		all: Boolean to return all courses (Optional)

/dataserver2/janux/fmaep_users_status (GET) Return a table with the status of fmaep user status 
	params:
		username/usernames: Comma delimted usernames (Optional)

/dataserver2/janux/fmaep_courses (GET) Return the list of fmaep countries

/dataserver2/janux/fmaep_urls (GET) Return the fmaep URLS

/dataserver2/janux/fmaep_check_accounts (POST) Check/Update account status of a set of fmaep users
	params:
		username/usernames: Comma delimted usernames (Optional)
		notify: Boolean for event notification (Optional default is True)

/dataserver2/janux/fmaep_set_state (POST) Set the fmaep of a user
	params:
		username: username
		notify: Boolean for event notification (Optional default is False)
		state: fmaep State - extra state called Reseted to reset all fmaep data
		pidm: PIDM (Optional)
		tempmatchid: tempmatchid (Optional)
		
/dataserver2/janux/fmaep_admission_inquiry (POST) Query/ Upadate the admision of a user
	params:
		username: username
		tempmatchid: tempmatchid (Optional)

nti.app.store

/dataserver2/janux/get_users_purchase_history (GET) Return a report purchase history for a purchasable
	params:
		purchasable: Purchasable NTIID
		username/usernames: Comma delimted usernames (Optional)
		failed: Boolean to return only failed purchase (Optional)
		succeeded: Boolean to return successful purchase (Optional)
		
/dataserver2/janux/get_users_gift_history (GET) Return a report gift purchase history
	params:
		username/usernames: Comma delimted usernames (Optional)
		failed: Boolean to return only failed purchase (Optional)
		succeeded: Boolean to return successful purchase (Optional)
		starTime:  Start time (Optional)
		endTime: End time (Optional)

/dataserver2/janux/delete_purchase_attempt (POST) delete a purchase attempt
	params:
		purchase: Purchase NTIID

/dataserver2/janux/delete_purchase_history (POST) delete a user's purchase history
	params:
		username: Username
		
/dataserver2/janux/generate_purchase_invoice (POST) Generate a purchase invoice (send email)
	params:
		purchase: Purchase NTIID or transaction code

/dataserver2/janux/create_invitation_purchase (POST) Create and invitation purchase
	params:
		purchasable: Purchasable NTIID 
		quantity: Quantity (Number of tokens)
		expiration: Expiration time (Optional)

nti.dataserver

/dataserver2/@@bulk_email_admin (POST, GET)
/dataserver2/@@bounced_email_admin POST, GET)

/dataserver2/@@SyncAllLibraries (POST, GET)

/dataserver2/@@intid_resolver/{intid} (GET) Resolves an intid
/dataserver2/@@unregister_missing_objects (POST) Unregister from the intid utility all missing / broken objects

/dataserver2/@@GetUserBlacklist (GET) Return the blacklisted usernames 
/dataserver2/@@RemoveFromUserBlacklist (POST) Remove a user from the blacklist
	params:
		username: Username

/dataserver2/@@RemoveUserBrokenObjects (POST) Remove a user broken objects
	params:
		username: Username
		
/dataserver2/@@RemoveUser (POST) delete a user 
	params:
		username: Username
		containers: (Optional) Go through the users containers (Default True)
		stream: (Optional) Go through the user's stream containers (Default False)
		shared: (Optional) Go through the user's shared containers (Default False)
		dynamic: (Optional) Go through the user's dynamic friends containers (Default False)
		
/dataserver2/@@export_user_objects (GET) Export all [registered] user objects
	params:
		username/usernames: Comma delimted usernames (Optional)
		mime_types/mimeTypes Comma delimted mime types (Optional)

/dataserver2/@@export_objects_sharedwith (GET) Export all objects shared with a user
	params:
		username: Username (Optional)
		mime_types/mimeTypes Comma delimted mime types (Optional)
		
/dataserver2/@@object_resolver/{ntiid} (GET) Resolves an ntiid

/dataserver2/@@export_users (GET) Export a set of users
	params:
		username/usernames: Comma delimted usernames (Optional)
		term: Username search term (optional)
		summary:  Summary export boolean flag (Optional)

/dataserver2/@@send_user_email_verification (POST) Send the email verification to a set of users
	params:
		username/usernames: Comma delimted usernames

/dataserver2/@@user_info_extract (GET) Report a table with user information

/dataserver2/@@user_opt_in_comm (GET) Report a table with users that have opt in in communication
	params:
		coppa: Coppa only users (Optional)

/dataserver2/@@user_email_verified (GET) Report a table with users that have their emails verified
	params:
		coppa: Coppa only users (Optional)
		
/dataserver2/@@user_profile_info (GET) Report a table with user profile info
	params:
		coppa: Coppa only users (Optional)
	
/dataserver2/@@inactive_accounts (GET) Report a table with inactive user accounts
	params:
		coppa: Coppa only users (Optional)

/dataserver2/@@user_profile_update (POST) Update profile fields for a user
	params:
		username: Username
		{profile_field}:{profile_value}
