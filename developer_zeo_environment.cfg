[buildout]
extends =
		webapps.cfg
		haproxy_nginx_environment.cfg
		zeo_environment.cfg
		hypatia.cfg
		badges.cfg
		analytics.cfg
		sites.cfg
		landingpages.cfg
		ims.cfg

# NOTE: When extending multiple base configs,
# only the parts from the bottom config are
# installed by default (even if they all use 'parts +=').
# So if we want to install parts from both configs,
# we need to explicitly list them.
parts +=
		openssl
		haproxy
		ssl-cert
		nginx
		nginx-conf
		haproxy-conf
		memcached
		senchacmd
		compass
		grunt
		nodeserver-env
		nodeserver
		app-minify
		deploy-mobile-app
		ext42
		ext42-link
		client-site-package
		site-columbia-nginx
		site-connect-nginx
		site-history-nginx
		site-janux-nginx
		site-litworld-nginx
		site-oc-nginx
		site-okstate-nginx
		site-prmia-nginx
		site-spurstartup-nginx
		site-symmys-nginx

[site-sources]
<= site-ALL-sources

[product-sources]
<= product-ALL-sources

[landingpage-sources]
<= landingpage-ALL-sources

[zcml]
package_features +=
				devmode

[eggs]
eggs +=
		tox
		${site-ALL-eggs:eggs}
		${badges-ALL-eggs:eggs}
		${product-ALL-eggs:eggs}
		${analytics-ALL-eggs:eggs}

[landingpage-versions]
connect = branch=master
historychannel = branch=seperate-sites
mathcountsaopsou = branch=master
okstate = branch=master
severeweather = branch=master

[site-versions]
columbia = branch=master
connect = branch=master
janux = branch=master
litworld = branch=master
oc = branch=master
okstate = branch=master
prmia = branch=master
spurstartup = branch=master
symmys = branch=master

[nginx-conf]
nginx_daemon = off
nginx_max_open_files = 1000

[haproxy-conf]
haproxy_backend_port_rewrite =
	# Did the incoming Host header have a port in it? If so,
	# we will want to rewrite outgoing Location headers from nginx to
	# have the right port...nginx would put its own port in if we let
	# it, which is not right for any scenario; turning them off entirely
	# works for production when we are on the default ports, but fails
	# badly for development when we're not.
	# Our stunnel socket is always SSL, and is the only thing that is in development
	acl is_ssl so_id 42

	rspirep ^Location:\ http://([^0-9/].*?)/(.*) Location:\ http://\1:${environment:haproxy_http_port}/\2 unless is_ssl
	rspirep ^Location:\ .*://([^0-9/].*?)/(.*) Location:\ https://\1:${environment-haproxy:ssl_port}/\2 if is_ssl

haproxy_extra_config =
	# Mangle block so the web app can use fancy paths and not freak Nginx out
		reqrep ^([^\ :]*)\ ${environment:webapp_location}[^\ ]*/\ ([^\ ]*) \1\ ${environment:webapp_location}\ \2

[webapp-versions]
NextThoughtWebApp = branch=develop

[webapp-conf]
enable_logging = true
enable_global_onerror = false

[init_env]
# For development, install the initial test data and users
args = --with-example

[environment]
cache_servers = localhost:${memcached-conf:memcached-port}

[pserve-conf]
use_devmode = 1
secure_cookies = 0
debug_error_in_html = true
cookie_secret = devmode cookie secret
session_cookie_secret = devmode session cookie secret
pyramid_includes = pyramid_debugtoolbar

[gunicorn-conf]
# Make it easy to debug by using one worker
# and not preloading
workers = 1
preload_app = False

[site-columbia-nginx]
sitepackage_location = ${buildout:root-directory}/sources/nti.client.sites.columbia

[site-connect-nginx]
landingpage_path = ${buildout:root-directory}/sources/nti.content.landingpage.connect/dist
sitepackage_location = ${buildout:root-directory}/sources/nti.client.sites.connect

[site-history-nginx]
landingpage_path = ${buildout:root-directory}/sources/nti.content.landingpage.historychannel/client.history-channel/dist

[site-janux-nginx]
sitepackage_location = ${buildout:root-directory}/sources/nti.client.sites.janux

[site-litworld-nginx]
sitepackage_location = ${buildout:root-directory}/sources/nti.client.sites.litworld

[site-oc-nginx]
sitepackage_location = ${buildout:root-directory}/sources/nti.client.sites.oc

[site-okstate-nginx]
landingpage_path = ${buildout:root-directory}/sources/nti.content.landingpage.okstate/dist
sitepackage_location = ${buildout:root-directory}/sources/nti.client.sites.okstate

[site-prmia-nginx]
sitepackage_location = ${buildout:root-directory}/sources/nti.client.sites.prmia

[site-spurstartup-nginx]
landingpage_path = ${buildout:root-directory}/sources/nti.content.landingpage.spurstartup/dist
sitepackage_location = ${buildout:root-directory}/sources/nti.client.sites.spurstartup

[site-symmys-nginx]
sitepackage_location = ${buildout:root-directory}/sources/nti.client.sites.symmys

[client-site-package]
recipe = collective.recipe.cmd
on_install = true
on_update = true
srcdir = ${buildout:root-directory}/sources/
cmds =
	 pushd ${:srcdir}/nti.client.sites.columbia
	 ${buildout:root-directory}/bin/npm install
	 popd
	 pushd ${:srcdir}/nti.client.sites.connect
	 ${buildout:root-directory}/bin/npm install
	 popd
	 pushd ${:srcdir}/nti.client.sites.janux
	 ${buildout:root-directory}/bin/npm install
	 popd
	 pushd ${:srcdir}/nti.client.sites.litworld
	 ${buildout:root-directory}/bin/npm install
	 popd
	 pushd ${:srcdir}/nti.client.sites.oc
	 ${buildout:root-directory}/bin/npm install
	 popd
	 pushd ${:srcdir}/nti.client.sites.okstate
	 ${buildout:root-directory}/bin/npm install
	 popd
	 pushd ${:srcdir}/nti.client.sites.prmia
	 ${buildout:root-directory}/bin/npm install
	 popd
	 pushd ${:srcdir}/nti.client.sites.spurstartup
	 ${buildout:root-directory}/bin/npm install
	 popd
	 pushd ${:srcdir}/nti.client.sites.symmys
	 ${buildout:root-directory}/bin/npm install
	 popd
	 pushd ${:srcdir}/nti.content.landingpage.connect
	 ${buildout:root-directory}/bin/npm install
	 popd
	 pushd ${:srcdir}/nti.content.landingpage.historychannel/client.history-channel
	 ${buildout:root-directory}/bin/npm install
	 popd
	 pushd ${:srcdir}/nti.content.landingpage.okstate
	 ${buildout:root-directory}/bin/npm install
	 popd
	 pushd ${:srcdir}/nti.content.landingpage.spurstartup
	 ${buildout:root-directory}/bin/npm install
	 popd

[supervisor]
pserve_group_programs = pserve,hypatia,analytics,metadata
programs +=
		1 nginx ${deployment:bin-directory}/nginx
		1 haproxy ${deployment:bin-directory}/haproxy [-f ${deployment:etc-directory}/haproxy/haproxy.cfg -db]
		${memcached-conf:memcached-supervisor}
		99 analytics ${deployment:bin-directory}/nti_analytics_processor [-v]
		99 hypatia ${deployment:bin-directory}/nti_hypatia_indexer [-v -m ${hypatia-conf:mintime} -x ${hypatia-conf:maxtime} -l ${hypatia-conf:limit}]

# Turn these off for developers since they don't do
# any good, and they probably don't work anyway
[crashmail_pserve]
supervisor =

[fatalmail]
supervisor =
