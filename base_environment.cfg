[buildout]
extends = buildout.cfg
parts +=
	  passwords
	  directories
	  zcml
	  redis
	  redis-conf
	  pserve-conf
	  gunicorn-conf
	  library-conf
	  webapp-conf
	  clean_pyc
# We create and use a different root-directory
# variable so that we can build this out into
# a different directory than where we keep
# the buildout file and templates (and usually
# the main source checkout too)
root-directory = ${:directory}
bin-directory = ${:root-directory}/bin
installed = ${:root-directory}/.installed.cfg

[passwords]
recipe = nti.recipes.passwords
# Real environments will specify the
# file = argument, pointing to a .cast5
# file stored in source control. All the
# settings in that file that have the same name
# as this section will be added to this section
# and available for use in other parts.
sql_passwd =
smtp_passwd =

[environment]
# The environment part defines some settings
# that are specific to the environment and
# often used in more than one other part.
# TODO: This part is very large and is included
# by multiple other sections. For the file templates,
# its use can cause too many other things to change.
# split this up into the actual related groups
sql_user = ec2user
sql_host = localhost
cache_servers = localhost:11211
smtp_server =
smtp_from = automated-emails@nextthought.com
smtp_username =
smtp_use_tls = true
# port 25 is often blocked by ISPs, use one of the alternates, 465 or 587
smtp_port = 587
# This content is loaded and made available for library
# navigation in all sites. It is also served as the
# document root by nginx currently. Can be defined as a path
# relative to the buildout directory and will be normalized
# (mostly for developers)
global_content_directory = ${buildout:directory}/../DataserverGlobalLibrary
# The prefix under which nginx will make the
# content directory available. This is also
# given to the server so it can make the right
# urls.
global_content_location = /content/
# The primary DNS name of the environment
global_host_name = localhost
# the port the dataserver should listen on
dataserver_http_port = 8081
# Setup the flash port, if configured.
# An empty or missing value means to use the default port.
# A positive integer means to use that port. A negative
# integer disables the port.
dataserver_flash_port = 10843
# the port that nginx should listen on
nginx_http_port = 8080
nginx_user = nginx
nginx_workers = 9
# The location the webapp will be checked out to. Can be defined as a
# path relative to the buildout directory and will be normalized
webapp_path = ${buildout:directory}/../NextThoughtWebApp
# The location the login app will be checked out to. Can be defined as
# a path relative to the buildout directory and will be normalized
loginapp_path = ${buildout:directory}/../NextThoughtLoginApp

# The prefix that the webapp occupies in the
# URL space. This MUST end with a trailing slash
# FIXME: Having this occupy the root is wrong
# because it limits flexibility. It needs its own prefix
webapp_location = /

# The prefix that the login app occupies in the
# URL space. This MUST end with a trailing slash.
loginapp_location = /login/

# The main port haproxy listens on
haproxy_http_port = 8082
haproxy_http_addr = 127.0.0.1
# haproxy listens for Flash sockets on this port
# (usually 843)
haproxy_flashsocket_port = 9843
haproxy_workers = 1
# If haproxy gets a connection here, it will
# redirect to the ssl port. Usually 80.
haproxy_redirect_to_ssl_port = 7999

stunnel_socket = ${deployment:run-directory}/ssl-frontend.sock
# NOTE: The cert file name SHOULD match the default
# name; otherwise the process that builds stunnel
# prompts to create a default cert (prior to 5.0)
stunnel_cert_file = ${deployment:etc-directory}/stunnel/stunnel.pem
stunnel_https_port = 8443
stunnel_foreground = yes
stunnel_socket_owner =
haproxy_stunnel_socket_user =

# See the passwords recipe
sql_passwd = ${passwords:sql_passwd}
smtp_passwd = ${passwords:smtp_passwd}

[deployment]
root-directory = ${buildout:root-directory}
bin-directory = ${buildout:bin-directory}
etc-directory = ${:root-directory}/etc
log-directory = ${:root-directory}/var/log
run-directory = ${:root-directory}/var
rc-directory = ${:root-directory}/bin/rc
data-directory = ${:root-directory}/data
logrotate-directory = ${:root-directory}/etc/logrotate.d
crontab-directory = ${:root-directory}/etc/cron.d
mail-directory = ${:run-directory}/maildir
user=foo

[directories]
recipe = z3c.recipe.mkdir
create-intermediate = true
mode = 0700
paths =
	  ${deployment:etc-directory}
	  ${deployment:run-directory}
	  ${deployment:run-directory}/caches/chameleon_cache
	  ${deployment:data-directory}
	  ${deployment:log-directory}
	  ${deployment:rc-directory}
	  ${deployment:logrotate-directory}
	  ${deployment:crontab-directory}
	  ${deployment:mail-directory}
	  ${deployment:mail-directory}/cur
	  ${deployment:mail-directory}/new
	  ${deployment:mail-directory}/tmp
	  ${deployment:etc-directory}/stunnel

# We must be sure to create the "maildir" structure
# in the mail queue directory, it won't happen at
# runtime.

[zcml]
# Normally for specific environments, this will be extended
# using the <= syntax to pull in desired features
recipe = nti.recipes.zcml
deployment = deployment

# NOTE: the app.products.ou is here only for initial testing
# convenience
package_zcml =
			 nti.app.client_preferences
			 nti.app.pyramid_zope
			 nti.app.sites.alpha
			 nti.app.sites.prmia
			 nti.app.sites.columbia
			 nti.app.sites.demo
			 nti.app.sites.law
			 nti.app.sites.litworld
			 nti.app.sites.mathcounts
			 nti.app.sites.prmia
			 nti.app.sites.rwanda
			 nti.app.products.ou

package_location = package-includes
package_features = in-buildout

# Directly copying the packages is the easiest way
# to get them all loaded. If something doesn't have a set
# of pyramid views, you can use the -= syntox
# or likewise the += syntax
pyramid_zcml = ${:package_zcml}
pyramid_location = pyramid-includes
pyramid_file = pyramid
pyramid_features = in-buildout

[redis]
recipe = hexagonit.recipe.cmmi
url = http://download.redis.io/releases/redis-2.6.16.tar.gz
keep-compile-dir = true
configure-command = true
make-options =
			 PREFIX=${buildout:directory}
			 INSTALL_BIN=${deployment:bin-directory}

[redis-conf]
recipe = z3c.recipe.filetemplate
extends = environment
source-directory = templates
dest-directory = ${deployment:root-directory}
force-overwrite = true
files = redis.conf main.ini

# Redis settings
# Disable tcp usage by default
port = 0
# Saving.
# JAM: The default save settings (900/1 300/10, 60/10000) are
# probably insufficient for development purposes (few keys change, and
# restarts are rapid and often kill the redis server). Therefore, our
# default development configuration saves much *too* frequently for
# realworld use: every 30 seconds if anything has changed.
save-settings = save 30 1
redis-path = ${deployment:bin-directory}/redis-server

redis_client_url = file://${deployment:run-directory}/redis.sock

# memcache settings
memcached_servers = ${environment:cache_servers}


[pserve-conf]
recipe = z3c.recipe.filetemplate
# The recipe doesn't take into account
# variables from other sections used in the template
# when determining if it needs to update. Using
# extends seems to fix this
extends = environment
source-directory = templates
force-overwrite = true
dest-directory = ${deployment:root-directory}
files = pserve.ini

### Settings for the dataserver
flash-port = ${environment:dataserver_flash_port}
debug = true
# This is unused?
deploy_root = ${environment:global_content_directory}
mail_queue_path = ${deployment:mail-directory}
email_error_subject_prefix = Error
email_error_from = automated.emails@nextthought.com
email_error_to =
email_default_from = no-reply@nextthought.com
cookie_secret = ${environment:global_host_name}

use_devmode = 0
secure_cookies = 1

[gunicorn-conf]
recipe = z3c.recipe.filetemplate
extends = environment
source-directory = templates
force-overwrite = true
dest-directory = ${deployment:root-directory}

files = gunicorn.conf.py

http-port = ${environment:dataserver_http_port}

# For deployment, preloading is awesome. But for those hacking on the
# python code, it interfers with running a debugger in the sub-process
# since it doesn't exec(). This is a python literal
preload_app = True
# Auto-calculate by default
workers =
timeout = 1800
# Leave blank for trusted environments
forwarded_allow_ips =



[library-conf]
recipe = z3c.recipe.filetemplate
extends = environment
source-directory = templates
force-overwrite = true
dest-directory = ${deployment:root-directory}
files = library.zcml

library-type = filesystemLibrary
library-args =
			 directory="${environment:global_content_directory}"
			 prefix="${environment:global_content_location}"

[nginx-conf]
recipe = z3c.recipe.filetemplate
extends = environment
source-directory = templates
dest-directory = ${deployment:root-directory}
# the main conf file is already installed
# as part of building nginx, we must overwrite it
force-overwrite = true
files = nginx.conf dataserver.conf

# Whether nginx should daemonize. Set it to
# off if you will be controlling it with
# supervisor, on if system will control it
nginx_daemon = off
aio = aio on;
# The location of the config file
# on disk for the webapp.
webapp_config_file = ${deployment:root-directory}/etc/webapp/config.js

[nginx-conf:macosx]
# AIO is not even a directive on osx
aio =


[haproxy-conf]
recipe = z3c.recipe.filetemplate
extends = environment
source-directory = templates
dest-directory = ${deployment:root-directory}
# the main conf file is already installed
# as part of building nginx, we must overwrite it
force-overwrite = true
files = haproxy.cfg

# TODO: There are recipes that enumerate other sections; we
# probably want to use those here to avoid having to
# manually list out all server ips again. Alternatively,
# our own meta recipe.
nginx_servers =
			  server nginx 127.0.0.1:${environment:nginx_http_port} weight 1 maxconn 1024

dataserver_servers =
				   server dataserver 127.0.0.1:${environment:dataserver_http_port} weight 1 maxconn 1024

flash_servers =
			  server flashserver 127.0.0.1:${environment:dataserver_flash_port} weight 1 maxconn 1024

[webapp-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = config.js

# The list of features and whether they are on or
# not. The last one should not be followed by a comma.
# Probably best to replace this entirely per-environment
# than extend it.
features =
 		 "mutable-forums":true,
         "fancy-scroll":true,
         "notepad":true,
         "v3matching":false,
         "video-settings":true
# The location to redirect to when
# the user is not logged in
unauth_location = ${environment:loginapp_location}

# Whether mobile Safari is allowed
allow_mobile_safari = false

# A string hash value for CloudFront
# CORS caching issues. Environment specific.
cors_salt =  ${environment:global_host_name}

# The master switch to remove user profile
# support. Set to true in COPPA environments
disable_profiles = false

# Controls the presence of a global onerror
# handler to trap uncaught errors during load.
# on by default but useful to turn off in dev environments
enable_global_onerror = true

[stunnel-conf]
recipe = z3c.recipe.filetemplate
extends = environment
source-directory = templates
dest-directory = ${deployment:root-directory}
force-overwrite = true
files = stunnel.conf

[stunnel-cert]
# For creating the stunnel cert.
# In this case, we simply copy a default,
# but for production uses, use openssl.
# This should come *before* stunnel itself is built
# to avoid interactive prompts
recipe = collective.recipe.cmd
on_install = true
cmds = cp ${buildout:directory}/certs/stunnel_default.pem ${environment:stunnel_cert_file}

[eggs]
# Let scripts know where they should reach the dataserver
# mostly for testing
initialization += os.environ['DATASERVER_BUILDOUT_PORT'] = "${environment:dataserver_http_port}"

[supervisor]
recipe = collective.recipe.supervisor

supervisord-conf = ${deployment:etc-directory}/supervisord.conf
http-socket = unix
file = ${deployment:run-directory}/supervisord.sock
serverurl = unix:///${:file}
childlogdir = ${deployment:log-directory}
logfile = ${deployment:log-directory}/supervisord.log
pidfile = ${deployment:run-directory}/supervisord.pid
loglevel = info
supervisord-environment =
						DATASERVER_DIR=${deployment:root-directory},PYTHONHASHSEED=random

pserve-ini = ${deployment:etc-directory}/pserve.ini
programs =
		 999 pserve ${deployment:root-directory}/bin/nti_pserve [${:pserve-ini}]
		 10 redis ${redis-conf:redis-path} [${deployment:etc-directory}/redis.conf]

[clean_pyc]
# Having .pyc or .pyo files around in develop eggs
# is dangerous if the source file was deleted. It
# can lead to things apparently working (e.g., imports,
# ZODB objects) that really won't on a fresh checkout.
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = find ${buildout:develop-dir} -name "*.py[co]" -delete
