[buildout]
extends = buildout.cfg
parts +=
	  passwords
	  directories
	  zcml
	  redis
	  redis-conf
	  pserve-conf
	  library-conf
	  clean_pyc
# We create and use a different root-directory
# variable so that we can build this out into
# a different directory than where we keep
# the buildout file and templates (and usually
# the main source checkout too)
root-directory = ${:directory}
bin-directory = ${:root-directory}/bin
installed = ${:root-directory}/.installed.cfg

[passwords]
recipe = nti.recipes.passwords
# Real environments will specify the
# file = argument, pointing to a .cast5
# file stored in source control. All the
# settings in that file that have the same name
# as this section will be added to this section
# and available for use in other parts.
sql_passwd =
smtp_passwd =

[environment]
# The environment part defines some settings
# that are specific to the environment and
# often used in more than one other part.
# TODO: This part is very large and is included
# by multiple other sections. For the file templates,
# its use can cause too many other things to change.
# split this up into the actual related groups
sql_user = ec2user
sql_host = localhost
cache_servers = localhost:11211
smtp_server =
smtp_from = automated-emails@nextthought.com
smtp_username =
smtp_use_tls = true
# port 25 is often blocked by ISPs, use one of the alternates, 465 or 587
smtp_port = 587
# This content is loaded and made available for library
# navigation in all sites. It is also served as the
# document root by nginx currently
global_content_directory = /Library/WebServer/Documents
# The prefix under which nginx will make the
# content directory available. This is also
# given to the server so it can make the right
# urls.
global_content_location = /content/
# The primary DNS name of the environment
global_host_name = localhost
# the port the dataserver should listen on
dataserver_http_port = 8081
dataserver_flash_port = 10843
# the port that nginx should listen on
nginx_http_port = 8080
nginx_user = nginx
nginx_workers = 9
# The location the webapp will be checked
# out to
webapp_path = /opt/nti/NextThoughtWebApp
# The location the login app will be checked
# out to
loginapp_path = /opt/nti/NextThoughtLoginApp

# The main port haproxy listens on
haproxy_http_port = 8082
# haproxy listens for Flash sockets on this port
# (usually 843)
haproxy_flashsocket_port = 9843
haproxy_workers = 1
# If haproxy gets a connection here, it will
# redirect to the ssl port. Usually 80.
haproxy_redirect_to_ssl_port = 7999

stunnel_socket = ${deployment:run-directory}/ssl-frontend.sock
# NOTE: The cert file name SHOULD match the default
# name; otherwise the process that builds stunnel
# prompts to create a default cert (prior to 5.0)
stunnel_cert_file = ${deployment:etc-directory}/stunnel/stunnel.pem
stunnel_https_port = 8443
stunnel_foreground = yes
stunnel_socket_owner =
haproxy_stunnel_socket_user =

# See the passwords recipe
sql_passwd = ${passwords:sql_passwd}
smtp_passwd = ${passwords:smtp_passwd}

[deployment]
root-directory = ${buildout:root-directory}
bin-directory = ${buildout:bin-directory}
etc-directory = ${:root-directory}/etc
log-directory = ${:root-directory}/var/log
run-directory = ${:root-directory}/var
rc-directory = ${:root-directory}/bin/rc
data-directory = ${:root-directory}/data
logrotate-directory = ${:root-directory}/etc/logrotate.d
crontab-directory = ${:root-directory}/etc/cron.d
mail-directory = ${:run-directory}/maildir
user=foo

[directories]
recipe = z3c.recipe.mkdir
create-intermediate = true
mode = 0700
paths =
	  ${deployment:etc-directory}
	  ${deployment:run-directory}
	  ${deployment:data-directory}
	  ${deployment:log-directory}
	  ${deployment:rc-directory}
	  ${deployment:logrotate-directory}
	  ${deployment:crontab-directory}
	  ${deployment:mail-directory}

[zcml]
# Normally for specific environments, this will be extended
# using the <= syntax to pull in desired features
recipe = nti.recipes.zcml
deployment = deployment

# NOTE: the app.products.ou is here only for initial testing
# convenience
package_zcml =
			 nti.app.client_preferences
			 nti.app.products.ou
			 nti.app.sites.alpha
			 nti.app.sites.prmia
			 nti.app.sites.columbia
			 nti.app.sites.demo
			 nti.app.sites.law
			 nti.app.sites.litworld
			 nti.app.sites.mathcounts
			 nti.app.sites.prmia
			 nti.app.sites.rwanda
package_location = package-includes
package_features = in-buildout

# Directly copying the packages is the easiest way
# to get them all loaded. If something doesn't have a set
# of pyramid views, you can use the -= syntox
# or likewise the += syntax
pyramid_zcml = ${:package_zcml}
pyramid_location = pyramid-includes
pyramid_file = pyramid
pyramid_features = in-buildout

[redis]
recipe = hexagonit.recipe.cmmi
url = http://download.redis.io/releases/redis-2.6.16.tar.gz
keep-compile-dir = true
configure-command = true
make-options =
			 PREFIX=${buildout:directory}
			 INSTALL_BIN=${deployment:bin-directory}

[redis-conf]
recipe = z3c.recipe.filetemplate
extends = environment
source-directory = templates
dest-directory = ${deployment:root-directory}
force-overwrite = true
files = redis.conf main.ini
# Disable tcp usage by default
port = 0
# Saving.
# JAM: The default save settings (900/1 300/10, 60/10000) are
# probably insufficient for development purposes (few keys change, and
# restarts are rapid and often kill the redis server). Therefore, our
# default development configuration saves much *too* frequently for
# realworld use: every 30 seconds if anything has changed.
save-settings = save 30 1
redis-path = ${deployment:bin-directory}/redis-server

[pserve-conf]
recipe = z3c.recipe.filetemplate
# The recipe doesn't take into account
# variables from other sections used in the template
# when determining if it needs to update. Using
# extends seems to fix this
extends = environment
source-directory = templates
force-overwrite = true
dest-directory = ${deployment:root-directory}
files = pserve.ini

http-port = ${environment:dataserver_http_port}
debug = true
deploy_root = ${environment:global_content_directory}
# For deployment, preloading is awesome. But for development,
# it interfers with running a debugger in the sub-process since it doesn't exec()
preload_app = false
workers = 1
timeout = 3000
mail_queue_path = ${deployment:mail-directory}
email_error_subject_prefix = Error
email_error_from = automated.emails@nextthought.com
email_error_to =
email_default_from = no-reply@nextthought.com

[library-conf]
recipe = z3c.recipe.filetemplate
extends = environment
source-directory = templates
force-overwrite = true
dest-directory = ${deployment:root-directory}
files = library.zcml

library-type = filesystemLibrary
library-args =
			 directory="${environment:global_content_directory}"
			 prefix="${environment:global_content_location}"

[nginx-conf]
recipe = z3c.recipe.filetemplate
extends = environment
source-directory = templates
dest-directory = ${deployment:root-directory}
# the main conf file is already installed
# as part of building nginx, we must overwrite it
force-overwrite = true
files = nginx.conf dataserver.conf

aio = aio on;

[nginx-conf:macosx]
# AIO is not even a directive on osx
aio =


[haproxy-conf]
recipe = z3c.recipe.filetemplate
extends = environment
source-directory = templates
dest-directory = ${deployment:root-directory}
# the main conf file is already installed
# as part of building nginx, we must overwrite it
force-overwrite = true
files = haproxy.cfg

[stunnel-conf]
recipe = z3c.recipe.filetemplate
extends = environment
source-directory = templates
dest-directory = ${deployment:root-directory}
force-overwrite = true
files = stunnel.conf

[stunnel-cert]
# For creating the stunnel cert.
# In this case, we simply copy a default,
# but for production uses, use openssl.
# This should come *before* stunnel itself is built
# to avoid interactive prompts
recipe = collective.recipe.cmd
on_install = true
cmds = cp ${buildout:directory}/certs/stunnel_default.pem ${environment:stunnel_cert_file}

[eggs]
# Let scripts know where they should reach the dataserver
# mostly for testing
initialization += os.environ['DATASERVER_BUILDOUT_PORT'] = "${pserve-conf:http-port}"

[supervisor]
recipe = collective.recipe.supervisor

supervisord-conf = ${deployment:etc-directory}/supervisord.conf
http-socket = unix
file = ${deployment:run-directory}/supervisord.sock
serverurl = unix:///${:file}
childlogdir = ${deployment:log-directory}
logfile = ${deployment:log-directory}/supervisord.log
pidfile = ${deployment:run-directory}/supervisord.pid
loglevel = info
supervisord-environment =
						DATASERVER_DIR=${deployment:root-directory},PYTHONHASHSEED=random

pserve-ini = ${deployment:etc-directory}/pserve.ini
programs =
		 999 pserve ${deployment:root-directory}/bin/nti_pserve [${:pserve-ini}]
		 10 redis ${redis-conf:redis-path} [${deployment:etc-directory}/redis.conf]

[clean_pyc]
# Having .pyc or .pyo files around in develop eggs
# is dangerous if the source file was deleted. It
# can lead to things apparently working (e.g., imports,
# ZODB objects) that really won't on a fresh checkout.
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = find ${buildout:develop-dir} -name "*.py[co]" -delete
