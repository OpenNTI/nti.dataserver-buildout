[buildout]
extends =
		logrotate.cfg
		haproxy_nginx_environment.cfg
		relstorage_environment.cfg
		spark.cfg
		orgsync.cfg
		tableau.cfg
		learning.cfg
		reports.cfg
		metadata.cfg
		publishing.cfg
		campusgenius.cfg
		mathplacement.cfg
		ou_recommendations.cfg
		nodeapps_prod.cfg
		base_environment.cfg

extensions -= buildout.wheel

show-picked-versions = true
update-versions-file = versions.cfg

sources-dir = sources
auto-checkout = *
always-checkout = true

parts +=
		openssl
		haproxy
		ssl-cert
		nginx
		nginx-conf
		haproxy-conf
		memcached
# learning
		pyspark
		scipy
		scikit_learn
		xgboost
# supervisor		
		supervisor
# mysql
		mysql
		MySQL-python
		relstorages
# code confs
		tableau-conf
		spark-hive-conf
		orgsync-key-conf
		orgsync-db-conf
		ourecomm-db-conf
# Web stuff
		webapp-conf
		nodeserver-env
		client-site-package-conf
		client-site-package

parts -=
		library-conf
		roles

[orgsync-sources]
<= orgsync-ALL-sources

[campusgenius-sources]
<= campusgenius-DS-sources

[eggs]
dataserver_egg = nti.dataserver
# If you want to test buildout recipes that use install_develop
# for themselves, they must be included in the eggs
eggs =
		PyMySQL
		httpie
		${:dataserver_egg}
		nti.wsgi.cors
		nti.identifiers
		nti.app.client_preferences
		nti.app.pyramid_zope
		zope.app.apidoc
		zope.app.zcmlfiles
		zope.app.authentication
		${spark-ALL-eggs:eggs}
		${tableau-ALL-eggs:eggs}
		${orgsync-ALL-eggs:eggs}
		${reports-ALL-eggs:eggs}
		${learning-ALL-eggs:eggs}
		${metadata-ALL-eggs:eggs}
		${publishing-ALL-eggs:eggs}
		${campusgenius-DS-eggs:eggs}
		${mathplacement-ALL-eggs:eggs}
		${ou-recommendations-ALL-eggs:eggs}

[pip]
recipe = zc.recipe.egg
eggs =
   	 pip

[pyspark]
recipe = zc.recipe.egg
eggs =
	 numpy
	 pandas
	 pyspark

[scipy]
recipe = zc.recipe.egg
eggs =
   	 scipy

[scikit_learn]
recipe = zc.recipe.egg
eggs =
   	 scikit-learn

[xgboost]
recipe = zc.recipe.egg
eggs =
	 xgboost

[zcml]
package_features +=	learning_env

[server-versions]
All = @127959
server = branch=master
dataserver = ${server-versions:server}
geventwebsocket = ${server-versions:server}

[async-versions]
async = ${server-versions:server}
app_async = ${server-versions:server}

[base-versions]
base = ${server-versions:server}
containers = ${server-versions:server}
dublincore = ${server-versions:server}
intid = ${server-versions:server}
futures = ${server-versions:server}
ntiids = ${server-versions:server}
plone.namedfile = ${server-versions:server}

[dataserver-base-versions]
app.site = ${server-versions:server}
identifiers = ${server-versions:server}
links = ${server-versions:server}

[publishing-versions]
app_publishing = ${server-versions:server}
publishing = ${server-versions:server}

[recipe-versions]
json = ${server-versions:server}
zodb = ${server-versions:server}
passwords = ${server-versions:server}

[recorder-versions]
app_recorder = ${server-versions:server}
recorder = ${server-versions:server}

[reports-versions]
app_reports = ${server-versions:server}
reports = ${server-versions:server}

[relstorages]
shared-blob-dir = false
storages = Users
enable-persistent-cache = true
cache-local-dir-count = 6

[relstorages_opts]
sql_adapter_extra_args =
					port 3306
					driver umysqldb

[relstorages_users_storage_opts]
sql_host = ip-172-31-30-254.ec2.internal
sql_passwd = ${passwords:sql_users_passwd}

[environment]
cache_servers = localhost:11211
sql_user = ntiuser

[environment-haproxy]
ssl_cert = ${ssl-cert:pki_dir}/localhost.pem

[passwords]
file = ourecomm.pass.cast5

[nginx-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
# the main conf file is already installed
# as part of building nginx, we must overwrite it
force-overwrite = true
files = nginx.conf fastcgi.conf fastcgi_params koi-utf koi-win mime.types scgi_params uwsgi_params win-utf dataserver_caching.conf

# Core Settings
nginx_daemon = off
nginx_user = ntiuser
nginx_workers = 4
aio = aio on;

# Logging knobs
nginx_access_log = /dev/stdout
nginx_access_log_options = main buffer=4k flush=1m
nginx_error_log = /dev/stderr
nginx_error_log_level = warn

# PID file
nginx_pidfile = ${deployment:run-directory}/nginx.pid

# How many files to keep in the open cache. This should be
# at least 60K in production (smaller in dev where ulimits
# are usually not set up)
nginx_max_open_files = 60000

# Cache options
global_host_name = ""
nginx_ip = 0.0.0.0
nginx_proxy_port = ${environment:nginx_proxy_port}
nginx_extra_binds =
nginx_cache_path = ${deployment:cache-directory}/nginx
nginx_cache_options = max_size=1g inactive=60m use_temp_path=off
nginx_dataserver_port = lb.localhost:${environment:haproxy_http_port}
nginx_extra_server_config =

[nginx-conf:macosx]
# AIO is not even a directive on osx
aio =

[main-conf]
redis_client_url = redis://ip-172-31-21-121.ec2.internal:6379

[gunicorn-conf]
preload_app = true
workers = 2

[client-site-package-conf]
recipe = nti.recipes.json
output-file = ${buildout:directory}/package.json
contents-section = client-site-package-conf-main

[client-site-package-conf-main]
name = nti-buildout-dev
version = 0.0.1
description = NextThought Buildout Developer NodeJS Library
author = NextThought
private = true
dependencies-section = client-site-package-conf-deps

[client-site-package-conf-deps]
nti-lib-vendor = *
nti-web-app = ^2018.4.0-alpha.0
nti-web-login = ^2018.2.0-alpha.0
nti-web-mobile = ^2018.4.0-alpha.0
nti-web-service = ^1.13.0

[client-site-package]
recipe = collective.recipe.cmd
on_install = true
on_update = true
site-asset-package = ${buildout:root-directory}
cmds =
	 pushd ${:site-asset-package}
	 ${buildout:root-directory}/bin/npm install
	 ${buildout:root-directory}/bin/npm update
	 popd

[supervisor]
pserve_group_programs = pserve,metadata,spark_runner
programs +=
	1 nginx ${deployment:bin-directory}/nginx
	1 haproxy ${deployment:bin-directory}/haproxy [-f ${deployment:etc-directory}/haproxy/haproxy.cfg -db]
	1 node /usr/bin/node [${deployment:root-directory}/node_modules/nti-web-service/ --protocol proxy --env production --config ${deployment:root-directory}/etc/nodeserver-env.json]
	99 spark_runner ${deployment:bin-directory}/nti_spark_runner [-v]

[orgsync]
access-key = ${passwords:orgsync_key}

[orgsync-key-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = 795-orgsync-key.zcml

[orgsync-db]
dbname = orgsync
user = ntiuser
twophase = True
autocommit = False
driver = mysql+pymysql
host = ip-172-31-30-254.ec2.internal
password = ${passwords:sql_users_passwd}

[orgsync-db-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = 790-orgsync-db.zcml

[ourecomm-db]
dbname = ourecomm
user = ntiuser
twophase = True
autocommit = False
driver = mysql+pymysql
host = ip-172-31-30-254.ec2.internal
password = ${passwords:sql_users_passwd}

[ourecomm-db-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = 790-ourecomm-db.zcml

[spark-hive]
master = spark://ip-172-31-30-254.ec2.internal:7077
log-level = ERROR
location = /home/ec2-user/dtap-warehouse
app-name = OU-Recommendations

[spark-hive-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = 800-spark-hive.zcml

[tableau]
url = https://tableau.ou.edu
site = gjh
username = higg2108
password = ${passwords:tableau_passwd}

[tableau-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = 900-tableau.zcml
