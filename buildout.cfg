[buildout]
parts =
	  eggs
	  ropeproject
	  omelette
relative-paths = true
extensions = gp.vcsdevelop
#mr.developer is like gp.vcsdevelop
# but offers much more flexibility
# for when we need it (not sure
# if the dependant-scripts in it work out?)
#extensions = mr.developer
develop-dir = ./sources
requirements = source-list.txt
# By default, buildout checks for
# updated eggs when the requirements
# specify no version or >=. This can
# be fairly slow if most requirements are
# unpinned. Setting newest to false
# makes this not happen. The command line
# arg -n can make it happen again
newest = false
# Valid valued for vcs-update are
# always and true. always does a fresh
# checkout, true tries to do an update
# in place. But true seems to have problems
# with the changed directory scheme in
# svn 1.7+
# vcs-update =

[eggs]
recipe = zc.recipe.egg
eggs = ${buildout:requirements-eggs}
	   nti.dataserver[tools,test]
	   ZEO
	   ipython
interpreter = python
# If we specify dependent-scripts as true,
# then the 'hack' we had for the nti.dataserver
# version of pserve to override the pyramid version
# of pserve fails to work. Thus, we need to explicitly
# list either all the scripts or the eggs we want all scripts
# from...the approach here is to list the eggs
#dependent-scripts = true
# Make sure all these scripts know where their
# home is, and that it is a buildout
initialization =
			   import os
			   os.environ['DATASERVER_DIR'] = "${buildout:directory}"
			   os.environ['DATASERVER_DIR_IS_BUILDOUT'] = "1"

[ropeproject]
recipe = collective.recipe.ropeproject
eggs = ${eggs:eggs}

[omelette]
recipe = collective.recipe.omelette
eggs = ${eggs:eggs}
# By creating a flattened, non-namespaced directory of all installed
# packages, Omelette makes it easy to browse all code in one place. it
# also makes it easy to set a python path for PyDev and the like.
