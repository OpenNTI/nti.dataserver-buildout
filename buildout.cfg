[buildout]
extends =
		 versions.cfg
		 pillow.cfg

update-versions-file = versions.cfg
show-picked-versions = true
# python_ldap and related can move.
parts =
	  libgmp
	  pycrypto
	  cython
#	  lxml
	  python_ldap
	  pillow
	  eggs
	  checkversions
# Using 'true' causes issues with file templates and extra Z3C_RECIPE_FILETEMPLATE_BASE
# not being interpreted
relative-paths = false

# By default, buildout checks for
# updated eggs when the requirements
# specify no version or >=. This can
# be fairly slow if most requirements are
# unpinned. Setting newest to false
# makes this not happen. The command line
# arg -n can make it happen again
newest = false


# We manage our checkouts using mr.developer, which
# easily allows pinning versions (revision=XXX)
# and provides the 'develop' command with many
# useful actions (like 'rebuild)
# See https://pypi.python.org/pypi/mr.developer/
extensions = mr.developer
mr.developer-threads = 35
sources-dir = sources
auto-checkout = *
# always-checkout =
# This defaults to false. If it's true, then all packages specified by
# auto-checkout and currently in develop mode are updated during each
# buildout run. If set to force, then packages are updated even when
# they are dirty instead of asking interactively.

[base-sources]
# Versioning:
# From the docs:
# 	You can specify a url with a revision pin, like http://example.com/trunk@123.
# 	You can also set the rev or revision option, which is either a pin
# 	like with rev=123 or a minimum revision like rev=>123 or rev=>=123.
# 	When you set a minimum revision, the repository is updated when the
# 	current revision is lower.
# We've noticed that using the option doesn't initially check out that version, only
# subsequent updates (re-run of buildout) will switch to that version. Therefore,
# the syntax in the URL is preferred, which means we cannot have a space
# You can also set update=false to manually manage updating a checkout.

nti.app.assessment = svn https://repos.nextthought.com/svn/nti-svn/nti.app.assessment/trunk${server-versions:All}
nti.app.client_preferences = svn https://repos.nextthought.com/svn/nti-svn/nti.app.client_preferences/trunk${server-versions:All}
nti.app.pyramid_zope = svn https://repos.nextthought.com/svn/nti-svn/nti.app.pyramid_zope/trunk${server-versions:All}

nti.app.store = svn https://repos.nextthought.com/svn/nti-svn/nti.app.store/trunk${server-versions:All}
nti.store = svn https://repos.nextthought.com/svn/nti-svn/nti.store/trunk${server-versions:All}

nti.assessment = svn https://repos.nextthought.com/svn/nti-svn/nti.assessment/trunk${server-versions:All}
nti.contenttypes.courses = svn https://repos.nextthought.com/svn/nti-svn/nti.contenttypes.courses/trunk${server-versions:All}
nti.dataserver = svn https://repos.nextthought.com/svn/nti-svn/NextThoughtPlatform/trunk/nti.dataserver${server-versions:All}
nti.geventwebsocket = git https://github.com/NextThought/nti.geventwebsocket.git

nti.app.hypatia = svn https://repos.nextthought.com/svn/nti-svn/nti.app.hypatia/trunk${server-versions:All}
nti.hypatia = svn https://repos.nextthought.com/svn/nti-svn/nti.hypatia/trunk${server-versions:All}

nti.openmath = svn https://repos.nextthought.com/svn/nti-svn/nti.openmath/trunk${server-versions:All}
nti.plasTeX = git https://github.com/NextThought/nti.plasTeX.git
nti.schema = git https://github.com/NextThought/nti.schema.git
nti.recipes.passwords = svn https://repos.nextthought.com/svn/nti-svn/nti.recipes.passwords/trunk${server-versions:All}
nti.recipes.zcml = svn https://repos.nextthought.com/svn/nti-svn/nti.recipes.zcml/trunk${server-versions:All}
nti.recipes.zodb = svn https://repos.nextthought.com/svn/nti-svn/nti.recipes.zodb/trunk${server-versions:All}
nti.wsgi.cors = svn https://repos.nextthought.com/svn/nti-svn/nti.wsgi.cors/trunk${server-versions:All}
pywikipedia = svn https://repos.nextthought.com/svn/nti-svn/NextThoughtPlatform/trunk/lib/pywikipedia${server-versions:All}
z3c.recipe.filetemplate = git https://github.com/NextThought/z3c.recipe.filetemplate.git
collective.recipe.supervisor = git https://github.com/NextThought/collective.recipe.supervisor.git

[server-versions]
# This section can be used to define version pins
# for mr.developer. Currently, we define one version
# pin for all components, as that's the safest way to be sure
# we have a matching set of components that work together.
# We also only define a version pin for the SVN repository,
# as the git components are non-critical (not used at runtime)
# or slow-changinge
#All = @33001
All =

[site-sources]

[product-sources]

[extra-sources]

[webapp-sources]

[sources]
<= base-sources
   site-sources
   product-sources
   webapp-sources
   extra-sources

[cython]
recipe = zc.recipe.egg
# Need to include cython so it gets
# on the path and can be used by lxml
# and gevent. This needs to happen
# in a separate part so the scripts
# exist.
eggs =
	 cython


[deployment]
root-directory = ${buildout:directory}

[lxml]
# A build of lxml that uses local libxml2 and libxslt
# for repeatability and to better work without
# having -dev packages installed.
# NOTE: Under OS X, version 0.9 of this recipe has an incompatibility
# with recent lxml versions. For details and a workaround,
# see https://github.com/seletz/z3c.recipe.staticlxml/issues/9
recipe = z3c.recipe.staticlxml
# If this exact version was already present
# in buildout-eggs, it won't be rebuilt
egg = lxml==3.3.6
libxml2-url = http://xmlsoft.org/sources/libxml2-2.9.1.tar.gz
libxslt-url = http://xmlsoft.org/sources/libxslt-1.1.28.tar.gz

[eggs]
recipe = zc.recipe.egg
dataserver_egg = nti.dataserver[tools]
# pycrypto is an optional dependency for
# some of the password salts. since we need
# it for the recipe anyway, add it here too
eggs =
	 cython
	 pycrypto
	 pillow
	 pip
	 ${:dataserver_egg}
interpreter = python
# Note that when scripts are installed,
# the order is not knowable. Thus it is not
# possible for one egg to reliable override
# a script from another egg, without
# explicitly listing exactly which scripts (from all
# eggs) to install. That is a large list, so
# we just need to make sure we don't have conflicts
# in names.
dependent-scripts = true
# Make sure all these scripts know where their
# home is, and that it is a buildout
initialization =
			   import os
			   os.environ['DATASERVER_DIR'] = "${deployment:root-directory}"
			   os.environ['DATASERVER_ETC_DIR'] = "${deployment:etc-directory}"
			   os.environ['DATASERVER_DIR_IS_BUILDOUT'] = "1"
			   os.environ['DATASERVER_DATA_DIR'] = "${deployment:data-directory}"
			   os.environ['CHAMELEON_CACHE'] = "${deployment:root-directory}/var/caches/chameleon_cache"


[translations]
# Update the message catalogs as appropriate
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = for d in sources/*; do echo $d; test -f $d/babel.cfg && (cd $d && python ./setup.py extract_messages && python ./setup.py update_catalog && python ./setup.py compile_catalog); done



[ropeproject]
# Create a project file for rope containing all
# the eggs explicitly. This is not enabled by
# default because the .ropeprojects/config.py cannot
# be customized correctly. However, it is easy to get
# a decent path using omelette
recipe = collective.recipe.ropeproject
eggs = ${eggs:eggs}


[checkversions]
# Provides a 'checkversions' script
# that does the same thing as pip-review
# or pip list --outdated but for a buildout
recipe = zc.recipe.egg
eggs = z3c.checkversions [buildout]

[omelette]
recipe = collective.recipe.omelette
eggs = ${eggs:eggs}
# By creating a flattened, non-namespaced directory of all installed
# packages, Omelette makes it easy to browse all code in one place. it
# also makes it easy to set a python path for PyDev and the like.

# NOTE: The openldap_client, cyrus_sasl and python_ldap
# parts can move to a buildout specific to an ou environment
# Not enabled right now because previously people had installed
# these things manually, so don't duplicate effort

[openldap_client]
# the python-ldap project needs these client libraries
recipe = hexagonit.recipe.cmmi
url = ftp://ftp.openldap.org/pub/OpenLDAP/openldap-release/openldap-2.4.39.tgz
keep-compile-dir = true
configure-options =
				  --disable-slapd
				  --disable-slurpd
make-targets =
			 depend
			 install

[cyrus_sasl:linux]
# the python-ldap client needs these
recipe = hexagonit.recipe.cmmi
url = http://ftp.andrew.cmu.edu/pub/cyrus-mail/cyrus-sasl-2.1.25.tar.gz
configure-options =
				  --disable-macos-framework

[python_ldap:linux]
recipe = zc.recipe.egg:custom
include-dirs =
			 ${openldap_client:prefix}/include
			 ${cyrus_sasl:prefix}/include
library-dirs =
			 ${openldap_client:prefix}/lib
			 ${cyrus_sasl:prefix}/lib
egg = python-ldap

[python_ldap:macosx]
recipe = zc.recipe.egg:custom
# It turns out to be really hard to build cyrus-sasl
# on OS X, requiring way too many hacks.
# install it with macports instead. sorry.
include-dirs =
			 ${openldap_client:prefix}/include
			 /opt/local/include
			 /opt/local/include/sasl
library-dirs =
			 ${openldap_client:prefix}/lib
			 /opt/local/lib
egg = python-ldap

[libgmp]
# GNU math library, needed by crypto to get _fastmath
recipe = hexagonit.recipe.cmmi
url = https://ftp.gnu.org/gnu/gmp/gmp-5.1.3.tar.bz2
keep-compile-dir = true

[libgmp_env]
CFLAGS = -I${libgmp:prefix}/include
LDFLAGS = -L${libgmp:prefix}/lib

[libgmp_env:linux]
# This next one is to fix 'undefined symbol rpl_malloc';
# see e.g., http://wiki.buici.com/xwiki/bin/view/Programing+C+and+C%2B%2B/Autoconf+and+RPL_MALLOC
# Not sure what osx's malloc does, so only define it on
# linux, which is the only place we've seen that problem
ac_cv_func_malloc_0_nonnull = yes

[pycrypto]
recipe = zc.recipe.egg:custom
include-dirs =
	${libgmp:prefix}/include
library-dirs =
	${libgmp:prefix}/lib
environment = libgmp_env
force = true
rpath = ${:library-dirs}
egg = pycrypto
