[buildout]
extends = versions.cfg
update-versions-file = versions.cfg
show-picked-versions = true
# python_ldap and related can move.
parts =
	  cython
	  lxml
	  python_ldap
	  eggs
	  checkversions
relative-paths = true
extensions = gp.vcsdevelop
#mr.developer is like gp.vcsdevelop
# but offers much more flexibility
# for when we need it (not sure
# if the dependant-scripts in it work out?)
#extensions = mr.developer
develop-dir = sources
# gp.vcsdevelop allows externalizing things into
# a requirements.txt style file, but listing
# develop eggs directly in the buildout is better
# because it allows slightly easier extension
# and subtraction of values in extended buildouts.
# It is worse, though, because you lose
# #{buildout:requirements-eggs}, which means you have to
# repeat yourself in the [eggs] section; that's fine
# if you were already extending, I suppose.
# So the approach here is to keep the "base" things in the requirements
# file, with potential environment-specific eggs (like sites)
# in the environment files.
# NOTE: our current requirements has many site-specific things
# for ease of testing
#vcs-extend-develop =
# svn+https://repos.nextthought.com/svn/nti-svn/NextThoughtPlatform/trunk/nti.dataserver#egg=nti.dataserver
requirements = source-list.txt
# By default, buildout checks for
# updated eggs when the requirements
# specify no version or >=. This can
# be fairly slow if most requirements are
# unpinned. Setting newest to false
# makes this not happen. The command line
# arg -n can make it happen again
newest = false
# Valid valued for vcs-update are
# always and true. always does a fresh
# checkout, true tries to do an update
# in place. But true seems to have problems
# with the changed directory scheme in
# svn 1.7+.
# This is due to the old version of pip bundled in 2.2.3;
# current bitbucket uses a newer version of pip that
# fixes it. See https://bitbucket.org/gawel/gpvcsdevelop/raw/613c596874cfdd04ce17abd5c9bc08c14d18e99e/gp/vcsdevelop/get-pip.py
# (which is in both get-pip and get_pip)
# vcs-update =


[cython]
recipe = zc.recipe.egg
# Need to include cython so it gets
# on the path and can be used by lxml
# and gevent. This needs to happen
# in a separate part so the scripts
# exist.
eggs =
	 cython
	 pycrypto

[deployment]
root-directory = ${buildout:directory}

[lxml]
# A build of lxml that uses local libxml2 and libxslt
# for repeatability and to better work without
# having -dev packages installed
recipe = z3c.recipe.staticlxml
# If this exact version was already present
# in buildout-eggs, it won't be rebuilt
egg = lxml==3.2.3
libxml2-url = http://xmlsoft.org/sources/libxml2-2.9.1.tar.gz
libxslt-url = http://xmlsoft.org/sources/libxslt-1.1.28.tar.gz

[eggs]
recipe = zc.recipe.egg
eggs =
	 cython
	 ${buildout:requirements-eggs}
	 nti.dataserver[tools,test]
interpreter = python
# Note that when scripts are installed,
# the order is not knowable. Thus it is not
# possible for one egg to reliable override
# a script from another egg, without
# explicitly listing exactly which scripts (from all
# eggs) to install. That is a large list, so
# we just need to make sure we don't have conflicts
# in names.
dependent-scripts = true
# Make sure all these scripts know where their
# home is, and that it is a buildout
initialization =
			   import os
			   os.environ['DATASERVER_DIR'] = "${deployment:root-directory}"
			   os.environ['DATASERVER_DIR_IS_BUILDOUT'] = "1"
			   os.environ['CHAMELEON_CACHE'] = "${deployment:root-directory}/var/caches/chameleon_cache"


[translations]
# Update the message catalogs as appropriate
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = for d in sources/*; do echo $d; test -f $d/babel.cfg && (cd $d && python ./setup.py extract_messages && python ./setup.py update_catalog && python ./setup.py compile_catalog); done



[ropeproject]
# Create a project file for rope containing all
# the eggs explicitly. This is not enabled by
# default because the .ropeprojects/config.py cannot
# be customized correctly. However, it is easy to get
# a decent path using omelette
recipe = collective.recipe.ropeproject
eggs = ${eggs:eggs}


[checkversions]
# Provides a 'checkversions' script
# that does the same thing as pip-review
# or pip list --outdated but for a buildout
recipe = zc.recipe.egg
eggs = z3c.checkversions [buildout]

[omelette]
recipe = collective.recipe.omelette
eggs = ${eggs:eggs}
# By creating a flattened, non-namespaced directory of all installed
# packages, Omelette makes it easy to browse all code in one place. it
# also makes it easy to set a python path for PyDev and the like.

# NOTE: The openldap_client, cyrus_sasl and python_ldap
# parts can move to a buildout specific to an ou environment
# Not enabled right now because previously people had installed
# these things manually, so don't duplicate effort

[openldap_client]
# the python-ldap project needs these client libraries
recipe = hexagonit.recipe.cmmi
url = ftp://ftp.openldap.org/pub/OpenLDAP/openldap-release/openldap-2.4.36.tgz
keep-compile-dir = true
configure-options =
				  --disable-slapd
				  --disable-slurpd
make-targets =
			 depend
			 install

[cyrus_sasl:linux]
# the python-ldap client needs these
recipe = hexagonit.recipe.cmmi
url = http://ftp.andrew.cmu.edu/pub/cyrus-mail/cyrus-sasl-2.1.25.tar.gz
configure-options =
				  --disable-macos-framework

[python_ldap:linux]
recipe = zc.recipe.egg:custom
include-dirs =
			 ${openldap_client:prefix}/include
			 ${cyrus_sasl:prefix}/include
library-dirs =
			 ${openldap_client:prefix}/lib
			 ${cyrus_sasl:prefix}/lib
egg = python-ldap

[python_ldap:macosx]
recipe = zc.recipe.egg:custom
# It turns out to be really hard to build cyrus-sasl
# on OS X, requiring way too many hacks.
# install it with macports instead. sorry.
include-dirs =
			 ${openldap_client:prefix}/include
			 /opt/local/include
			 /opt/local/include/sasl
library-dirs =
			 ${openldap_client:prefix}/lib
			 /opt/local/lib
egg = python-ldap
