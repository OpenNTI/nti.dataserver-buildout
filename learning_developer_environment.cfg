[buildout]
# A buildout useful for developers working on the oubound
# project.  Comprises a core dataserver environment built on,
# zeo, testing resources, and oubound resources
[buildout]
extends =
		haproxy_nginx_environment.cfg
		zeo_environment.cfg
		learning.cfg

# NOTE: When extending multiple base configs,
# only the parts from the bottom config are
# installed by default (even if they all use 'parts +=').
# So if we want to install parts from both configs,
# we need to explicitly list them.
parts =
		pip
		cython
# buildout env
		libgmp
		pycrypto
		libyaml
		pyyaml
		lxml
		openssl
		pillow
# base env
		passwords
		directories
		zcml
		jq
		memcached
		redis
		main-conf
		redis-conf
		pserve-conf
		gunicorn-conf
		clean-pyc
		roles
# zeo env
		zeo
		supervisor
# dev zeo env
		haproxy
		ssl-cert
		nginx
		nginx-conf
		haproxy-conf
		memcached
# learning
		numpy
		stats
		statsmodels
		scipy
		scikit_learn
		pyspark
# learning
		eggs
		checkversions
# dataserver
		init_env
# scala
		com_nextthought_learning

[extra-sources]
nti.app.testing = svn https://repos.nextthought.com/svn/nti-svn/nti.app.testing/trunk

[eggs]
dataserver_egg = nti.dataserver[tools,test]
# If you want to test buildout recipes that use install_develop
# for themselves, they must be included in the eggs
eggs +=
		PyMySQL
		PredictionIO
		nti.nose_traceback_info
		nti.app.testing
		nti.recipes.zcml
		elpy
		uncommitted
		nose2
		nose2-cov
		zope.testrunner
		zope.app.apidoc
		zope.app.zcmlfiles
		zope.app.authentication
		${learning-ALL-eggs:eggs}

[pip]
recipe = zc.recipe.egg
eggs =
   	 pip
			 
[stats]
recipe = zc.recipe.egg
eggs =
	 pbr
	 mock
	 pytz
	 patsy
	 pandas
	 funcsigs
	 pyparsing
	 brewer2mpl
	 matplotlib
	 python-dateutil
	
[cython]
recipe = collective.recipe.cmd
on_install = true
cmds =${buildout:directory}/bin/pip install --upgrade cython

[numpy]
recipe = collective.recipe.cmd
on_update = true
on_install = true
cmds =${buildout:directory}/bin/pip install --upgrade numpy

[statsmodels]
recipe = collective.recipe.cmd
on_update = true
on_install = true
cmds =${buildout:directory}/bin/pip install --upgrade statsmodels

[scipy]
recipe = collective.recipe.cmd
on_update = true
on_install = true
cmds =${buildout:directory}/bin/pip install --upgrade scipy

[scikit_learn]
recipe = collective.recipe.cmd
on_update = true
on_install = true
cmds =${buildout:directory}/bin/pip install --upgrade scikit-learn

[pyspark]
recipe = collective.recipe.cmd
on_install = true
cmds =${buildout:directory}/bin/pip install --upgrade pyspark

[com_nextthought_learning]
recipe = git-recipe
repository = ${scala-sources:com.nextthought.learning}
download-directory = ${buildout:sources-dir}

[testrunner]
recipe = zc.recipe.testrunner
eggs =
		${eggs:dataserver_egg}
		nti.app.client_preferences
		nti.app.testing
		nti.testing

# Because 'test' is a reserved word in the shell,
# so you would have to give a full path
script = ztest
defaults = ['-p', '--auto-color', '-v']

[zcml]
package_features +=	devmode
					dscoreonly

[nginx-conf]
nginx_daemon = off
nginx_max_open_files = 1000

[haproxy-conf]
haproxy_backend_port_rewrite =
	# Did the incoming Host header have a port in it? If so,
	# we will want to rewrite outgoing Location headers from nginx to
	# have the right port...nginx would put its own port in if we let
	# it, which is not right for any scenario; turning them off entirely
	# works for production when we are on the default ports, but fails
	# badly for development when we're not.
	# Our stunnel socket is always SSL, and is the only thing that is in development
	acl is_ssl so_id 42

	rspirep ^Location:\ http://([^0-9/].*?)/(.*) Location:\ http://\1:${environment:haproxy_http_port}/\2 unless is_ssl
	rspirep ^Location:\ .*://([^0-9/].*?)/(.*) Location:\ https://\1:${environment-haproxy:ssl_port}/\2 if is_ssl

[init_env]
# For development, install the initial test data and users
args = --with-example

[environment]
cache_servers = localhost:${memcached-conf:memcached-port}
# tweak global content location for ease of running next to normal platform dataserver
global_content_directory = ${buildout:directory}/../OUBoundGlobalLibrary

[pserve-conf]
use_devmode = 1
secure_cookies = 0
debug_error_in_html = true
cookie_secret = devmode cookie secret
session_cookie_secret = devmode session cookie secret
pyramid_includes = pyramid_debugtoolbar

[gunicorn-conf]
# Make it easy to debug by using one worker
# and not preloading
workers = 1
preload_app = False

[supervisor]
pserve_group_programs = pserve,metadata
programs +=
			1 nginx ${deployment:bin-directory}/nginx
			1 haproxy ${deployment:bin-directory}/haproxy [-f ${deployment:etc-directory}/haproxy/haproxy.cfg -db]
			${memcached-conf:memcached-supervisor}
			
# Turn these off for developers since they don't do
# any good, and they probably don't work anyway
[crashmail_pserve]
supervisor =

[fatalmail]
supervisor =

# We don't need any of the webapp-conf files to be copied over.  That probably
# means those need to move up out of base_environment.cfg
[webapp-conf]
files=
