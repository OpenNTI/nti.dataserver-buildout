[buildout]
extends =
		haproxy_nginx_environment.cfg
		zeo_mixin.cfg
		spark.cfg
		orgsync.cfg
		tableau.cfg
		learning.cfg
		reports.cfg
		metadata.cfg
		publishing.cfg
		mathplacement.cfg
		ou_recommendations.cfg
		base_environment.cfg

extensions -= buildout.wheel

show-picked-versions = true
update-versions-file = versions.cfg

parts +=
		openssl
		haproxy
		ssl-cert
		nginx
		nginx-conf
		haproxy-conf
		memcached
		supervisor
# learning
		pyspark
		scipy
		scikit_learn
		xgboost
# testing
		testrunner
		nti_xmltest
# scala
		com_nextthought_learning
# zeo
		zeo
		init_env

[extra-sources]
nti.app.testing = svn https://repos.nextthought.com/svn/nti-svn/nti.app.testing/trunk

[eggs]
dataserver_egg = nti.dataserver[tools,test]
# If you want to test buildout recipes that use install_develop
# for themselves, they must be included in the eggs
eggs =
		PyMySQL
		psycopg2
		PredictionIO
		${:dataserver_egg}
		nti.wsgi.cors
		nti.identifiers
		nti.app.client_preferences
		nti.app.pyramid_zope
		zope.app.apidoc
		zope.app.zcmlfiles
		zope.app.authentication
		${spark-ALL-eggs:eggs}
		${tableau-ALL-eggs:eggs}
		${orgsync-ALL-eggs:eggs}
		${reports-ALL-eggs:eggs}
		${learning-ALL-eggs:eggs}
		${metadata-ALL-eggs:eggs}
		${publishing-ALL-eggs:eggs}
		${mathplacement-ALL-eggs:eggs}
		${ou-recommendations-ALL-eggs:eggs}
		nti.ou.orgsync_snapshot

[pip]
recipe = zc.recipe.egg
eggs =
   	 pip

[pyspark]
recipe = zc.recipe.egg
eggs =
	 numpy
	 pandas
	 pyspark

[scipy]
recipe = zc.recipe.egg
eggs =
   	 scipy

[scikit_learn]
recipe = zc.recipe.egg
eggs =
   	 scikit-learn

[xgboost]
recipe = zc.recipe.egg
eggs =
	 xgboost
			 
[nti_xmltest]
recipe = collective.xmltestreport
eggs =
	 ${base-eggs:eggs}
	 ${eggs:eggs}
	 ${ou-recommendations-ALL-eggs:eggs}
defaults = ['--auto-color', '-v', '-p']
initialization = ${eggs:initialization}
	 
[com_nextthought_learning]
recipe = git-recipe
repository = ${scala-sources:com.nextthought.learning}
download-directory = ${buildout:sources-dir}

[testrunner]
recipe = zc.recipe.testrunner
eggs =
		${eggs:dataserver_egg}
		nti.app.client_preferences
		nti.app.testing
		nti.testing

# Because 'test' is a reserved word in the shell,
# so you would have to give a full path
script = ztest
defaults = ['-p', '--auto-color', '-v']

[zcml]
package_features +=	devmode

[nginx-conf]
nginx_daemon = off
nginx_max_open_files = 1000

[haproxy-conf]
haproxy_backend_port_rewrite =
	# Did the incoming Host header have a port in it? If so,
	# we will want to rewrite outgoing Location headers from nginx to
	# have the right port...nginx would put its own port in if we let
	# it, which is not right for any scenario; turning them off entirely
	# works for production when we are on the default ports, but fails
	# badly for development when we're not.
	# Our stunnel socket is always SSL, and is the only thing that is in development
	acl is_ssl so_id 42

	rspirep ^Location:\ http://([^0-9/].*?)/(.*) Location:\ http://\1:${environment:haproxy_http_port}/\2 unless is_ssl
	rspirep ^Location:\ .*://([^0-9/].*?)/(.*) Location:\ https://\1:${environment-haproxy:ssl_port}/\2 if is_ssl

[init_env]
# For development, install the initial test data and users
args = --with-example

[environment]
cache_servers = localhost:${memcached-conf:memcached-port}
# tweak global content location for ease of running next to normal platform dataserver
global_content_directory = ${buildout:directory}/../OUBoundGlobalLibrary

[pserve-conf]
use_devmode = 1
secure_cookies = 0
debug_error_in_html = true
cookie_secret = devmode cookie secret
session_cookie_secret = devmode session cookie secret
pyramid_includes = pyramid_debugtoolbar

[gunicorn-conf]
# Make it easy to debug by using one worker
# and not preloading
workers = 1
preload_app = False

[supervisor]
pserve_group_programs = pserve,metadata,spark_runner
programs +=
	1 nginx ${deployment:bin-directory}/nginx
	1 haproxy ${deployment:bin-directory}/haproxy [-f ${deployment:etc-directory}/haproxy/haproxy.cfg -db]
	99 spark_runner ${deployment:bin-directory}/nti_spark_runner [-v]

# Turn these off for developers since they don't do
# any good, and they probably don't work anyway
[crashmail_pserve]
supervisor =

[fatalmail]
supervisor =

# We don't need any of the webapp-conf files to be copied over.  That probably
# means those need to move up out of base_environment.cfg
[webapp-conf]
files=
