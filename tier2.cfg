[buildout]
extends = 
        content_testing_environment_constants.cfg
        deployment.cfg

[haproxy-tier2-ci-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-ci.cfg
interpreted-options = stats_socket_owner
    haproxy_socket_user

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 200

pidfile = ${deployment:run-directory}/haproxy-tier2-ci.pid

stats_socket = ${deployment:run-directory}/haproxy-tier2-ci.sock
stats_socket_owner = os.environ['USER']

haproxy_socket = ${deployment:run-directory}/haproxy-ci-backend.sock
haproxy_socket_user = os.environ['USER']

# Define the servers for each backend
ci_servers =
    server jenkins 10.50.42.51:8080 weight 1 on-error mark-down check inter 60000 rise 2 fall 2 observe layer7

[haproxy-tier2-common]
aux1_ip = 10.50.0.50
ds1_ip = 10.50.0.100
ds2_ip = 10.50.0.101
ds3_ip = 10.50.8.102
ds4_ip = 10.50.8.103
aws-ds1_ip = 10.50.24.10

loginapp_location = /login/
webapp_location = /app/

haproxy_extra_config =
    reqrep ^([^\ :]*)\ .*/robots.txt\ ([^\ ]*) \1\ /robots-dev.txt\ \2 if robots

        acl is_dyn path_beg /library
        acl is_dyn path_beg /dictionary
        # The plain strings (non-site-specific) is also passed to the DS
        # for language negotiation and a redirect
        acl is_dyn path_beg ${:webapp_location}resources/strings/strings.js

        #Set a 15 minute cache header on all 404s from the dataserver to @@avatar
        rspidel ^Cache-Control if { status 404 } { url_sub -i @@avatar }
        rspadd Cache-Control:\ max-age=900 if { status 404 } { url_sub -i @@avatar }

        # Acls for optimizing away having to wait for a several second
        # webapp load if we know we are def. not authed
        acl is_maybe_authed hdr_sub(cookie) nti.auth_tkt # Do we have an auth.tkt? if not we are def. not authed

haproxy_extra_redirects = 
    # Go to the app by default
        # redirect location /down/down.html code 302 if { path_beg /NextThoughtWebApp or path_beg /login }  #THIS IS FOR THE DOWN PAGE ONLY- NOT WORKING YET
        # redirect location /NextThoughtWebApp/index.html code 301 if { path / }
        redirect location /tutorials/index.html code 301 if { path /tutorials }

        # If we might be authenticated, then if we are coming in to the root,
        # try to go to the app instead. This helps preserve old bookmarks
        # as well as streamlining the process.
        redirect location /app/ code 302 if is_maybe_authed { path / } !robots !google_verification

[haproxy-tier2-alpha-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-alpha.cfg
interpreted-options = stats_socket_owner
    haproxy_socket_user

hostname = alpha.nextthought.com

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 60000

pidfile = ${deployment:run-directory}/haproxy-tier2-alpha.pid

stats_socket_owner = os.environ['USER']
stats_socket = ${deployment:run-directory}/haproxy-tier2-alpha.sock

haproxy_addr = 10.50.0.50
haproxy_socket = ${deployment:run-directory}/haproxy-tier2-alpha-backend.sock
haproxy_socket_user = os.environ['USER']
haproxy_port = 20026
haproxy_http_port = 20020

haproxy_extra_config = 
    ${haproxy-tier2-common:haproxy_extra_config}

        acl AuthOk http_auth(overall)
        acl is_login path_beg /login
        acl is_login path_beg /dataserver2/logon
        acl is_content path_beg /content
        acl ios hdr_sub(user-agent) NextThought
        acl in_office src 156.110.43.3/31 # Office static IP from OneNet
        acl in_office src 66.210.82.130/24 # NCED static IP
        acl in_office src 156.110.241.0/24 # Datacenter public IPs
        acl in_office src 10.50.0.0/16 # Internal IPs
        acl in_office src 127.0.0.0/8 # Localhost
        acl in_office src 72.200.207.160/32 # Julie
        acl in_office src 98.162.214.29/32 # Kaley
        acl in_office src 98.162.207.229/32 # Kaley's Parents
        acl in_office src 162.242.30.207/32 # Mary
        acl in_office src 162.242.30.201/32 # Mary 2
        acl in_office src 72.200.203.181/32 # Jonathan
        acl in_office src 68.97.124.91/32 # Josh Z
        acl in_office src 72.198.29.248/32 # Carlos
        acl in_office src 68.97.65.57/32 # Austin Powell content QA
        acl in_office src 181.137.99.118/32 # Rebecca Wilkins content QA
        acl in_office src 205.143.223.114/32 # JP Iradukunda
        acl in_office src 68.97.195.121/32 # Ashley Home
        http-request auth realm Alpha if !is_login !AuthOk !ios !in_office !is_content

haproxy_extra_redirects = ${haproxy-tier2-common:haproxy_extra_redirects}

haproxy_userlists =
    userlist overall
            user alphauser insecure-password alphapass2011

    userlist UsersForHistoryLanding
            user ouhistorytest insecure-password ouhistorypass1027

# Define the destination port for each backend
dataserver_port = 20021
webserver_port = 20022
node_port = 20028

# Define the servers for each backend
dataservers =
    server data-aux1 ${haproxy-tier2-common:aux1_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

static_servers =
    acl AuthOk http_auth(UsersForHistoryLanding)
        acl is_history_landing hdr_beg(host) ou-alpha-history
        http-request auth realm History if !AuthOk is_history_landing !{ path_beg /hosted_badge_images } !{ path_beg /loginsuccess } !{ path_beg /content/ } !{ path_beg /app/ } !{ path_beg /login/ }

        server static-aux1 ${haproxy-tier2-common:aux1_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

node_servers =
    server node-aux1 ${haproxy-tier2-common:aux1_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

[haproxy-tier2-genius-alpha-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-genius-alpha.cfg
interpreted-options = stats_socket_owner
    haproxy_socket_user

hostname = genius-alpha.nextthought.com

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 60000

pidfile = ${deployment:run-directory}/haproxy-tier2-genius-alpha.pid

stats_socket_owner = os.environ['USER']
stats_socket = ${deployment:run-directory}/haproxy-tier2-genius-alpha.sock

haproxy_addr = 10.50.0.50
haproxy_socket = ${deployment:run-directory}/haproxy-tier2-genius-alpha-backend.sock
haproxy_socket_user = os.environ['USER']
haproxy_port = 20206
haproxy_http_port = 20200

haproxy_extra_config = #

haproxy_extra_redirects = #

haproxy_userlists = #

# Define the destination port for each backend
dataserver_port = 8081
webserver_port = 8085

# Define the servers for each backend
dataservers =
    server ds1 10.50.1.4:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server ds2 10.50.1.5:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

static_servers =
    server web1 10.50.1.6:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server web2 10.50.1.7:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

node_servers =

[haproxy-tier2-janux-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-janux.cfg
interpreted-options = stats_socket_owner
    haproxy_socket_user

hostname = janux.ou.edu

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 60000

pidfile = ${deployment:run-directory}/haproxy-tier2-janux.pid

stats_socket_owner = os.environ['USER']
stats_socket = ${deployment:run-directory}/haproxy-tier2-janux.sock

haproxy_addr = 
haproxy_socket = ${deployment:run-directory}/haproxy-tier2-janux-backend.sock
haproxy_socket_user = os.environ['USER']
haproxy_port = 20036
haproxy_http_port = 20030

haproxy_extra_config = ${haproxy-tier2-common:haproxy_extra_config}

haproxy_extra_redirects = ${haproxy-tier2-common:haproxy_extra_redirects}

haproxy_userlists =

# Define the destination port for each backend
dataserver_port = 20031
webserver_port = 20032
node_port = 20038

# Define the servers for each backend
dataservers =
    server data-ds1 ${haproxy-tier2-common:ds1_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server data-ds2 ${haproxy-tier2-common:ds2_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

static_servers =
    server static-ds1 ${haproxy-tier2-common:ds1_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server static-ds2 ${haproxy-tier2-common:ds2_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

node_servers =
    server node-ds1 ${haproxy-tier2-common:ds1_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server node-ds2 ${haproxy-tier2-common:ds2_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

[haproxy-tier2-okstate-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-okstate.cfg
interpreted-options = stats_socket_owner
    haproxy_socket_user

hostname = okstate.nextthought.com

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 60000

pidfile = ${deployment:run-directory}/haproxy-tier2-okstate.pid

stats_socket_owner = os.environ['USER']
stats_socket = ${deployment:run-directory}/haproxy-tier2-okstate.sock

haproxy_addr = 
haproxy_socket = ${deployment:run-directory}/haproxy-tier2-okstate-backend.sock
haproxy_socket_user = os.environ['USER']
haproxy_port = 20096
haproxy_http_port = 20090

haproxy_extra_config = ${haproxy-tier2-common:haproxy_extra_config}

haproxy_extra_redirects = ${haproxy-tier2-common:haproxy_extra_redirects}

haproxy_userlists =

# Define the destination port for each backend
dataserver_port = 20091
webserver_port = 200092
node_port = 20098

# Define the servers for each backend
dataservers =
    server data-ds3 ${haproxy-tier2-common:ds3_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server data-ds4 ${haproxy-tier2-common:ds4_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

static_servers =
    server static-ds3 ${haproxy-tier2-common:ds3_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server static-ds4 ${haproxy-tier2-common:ds4_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

node_servers =
    server node-ds3 ${haproxy-tier2-common:ds3_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server node-ds4 ${haproxy-tier2-common:ds4_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

[haproxy-tier2-prod-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-prod.cfg
interpreted-options = stats_socket_owner
    haproxy_socket_user

hostname = prod.nextthought.com

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 60000

pidfile = ${deployment:run-directory}/haproxy-tier2-prod.pid

stats_socket_owner = os.environ['USER']
stats_socket = ${deployment:run-directory}/haproxy-tier2-prod.sock

haproxy_addr = 
haproxy_socket = ${deployment:run-directory}/haproxy-tier2-prod-backend.sock
haproxy_socket_user = os.environ['USER']
haproxy_port = 20006
haproxy_http_port = 20000

haproxy_extra_config = ${haproxy-tier2-common:haproxy_extra_config}

haproxy_extra_redirects = ${haproxy-tier2-common:haproxy_extra_redirects}

haproxy_userlists =

# Define the destination port for each backend
dataserver_port = 20001
webserver_port = 20002
node_port = 20008

# Define the servers for each backend
dataservers =
    server data-ds3 ${haproxy-tier2-common:ds3_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server data-ds4 ${haproxy-tier2-common:ds4_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

static_servers =
    server static-ds3 ${haproxy-tier2-common:ds3_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server static-ds4 ${haproxy-tier2-common:ds4_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

node_servers =
    server node-ds3 ${haproxy-tier2-common:ds3_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server node-ds4 ${haproxy-tier2-common:ds4_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

[haproxy-tier2-uat-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-uat.cfg
interpreted-options = stats_socket_owner
    haproxy_socket_user

hostname = beta.nextthought.com

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 60000

pidfile = ${deployment:run-directory}/haproxy-tier2-uat.pid

stats_socket_owner = os.environ['USER']
stats_socket = ${deployment:run-directory}/haproxy-tier2-uat.sock

haproxy_addr = 10.50.0.50
haproxy_socket = ${deployment:run-directory}/haproxy-tier2-uat-backend.sock
haproxy_socket_user = os.environ['USER']
haproxy_port = 20046
haproxy_http_port = 20040

haproxy_extra_config = ${haproxy-tier2-common:haproxy_extra_config}

haproxy_extra_redirects = ${haproxy-tier2-common:haproxy_extra_redirects}

haproxy_userlists =

# Define the destination port for each backend
dataserver_port = 20041
webserver_port = 20042
node_port = 20048

# Define the servers for each backend
dataservers =
    server data-aux1 ${haproxy-tier2-common:aux1_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

static_servers =
    server static-aux1 ${haproxy-tier2-common:aux1_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

node_servers =
    server node-aux1 ${haproxy-tier2-common:aux1_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

[haproxy-tier2-okstate-aws-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-okstate-aws.cfg
interpreted-options = haproxy_addl_blocked_ip_acls
    haproxy_socket_user

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 60000
haproxy_addr = 10.50.30.236
haproxy_socket = ${deployment:run-directory}/haproxy-tier2-backend9.sock
haproxy_socket_user = os.environ['USER']
haproxy_port = 20096
haproxy_http_port = 20090

# HAproxy stats on a unix socket. See
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.2
haproxy_stats_socket = ${deployment:run-directory}/haproxy-tier2-alpha.sock

haproxy_extra_config =
    #OKState has a custom favicon.
        acl is_okstate hdr_dom(host) -i learnonline
        acl is_okstate hdr_dom(host) -i okstate
        acl is_okstate hdr_dom(host) -i okstate-alpha
        acl is_okstate hdr_dom(host) -i okstate-test
        reqrep ^([^\ :]*)\ .*/favicon\.ico \1\ /app/resources/images/okstate.nextthought.com/osu-favicon.ico if is_okstate

haproxy_extra_redirects =

# Define the destination port for each backend
dataserver_port = 20091
webserver_port = 20092
node_port = 20098

# App things
loginapp_location = /login/
webapp_location = /app/

haproxy_addl_blocked_ip_acls = ${haproxy-tier2-common:haproxy_addl_blocked_ip_acls}

# Define the servers for each backend
dataservers =
    server data-aux1 ${haproxy-tier2-common:aws-ds1_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

static_servers =
    server static-aux1 ${haproxy-tier2-common:aws-ds1_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

node_servers =
    server node-aux1 ${haproxy-tier2-common:aws-ds1_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

