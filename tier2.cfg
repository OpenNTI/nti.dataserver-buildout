[buildout]
extends = 
        content_testing_environment_constants.cfg
        deployment.cfg

parts +=
        haproxy-tier2-alpha-conf
        haproxy-tier2-ci-conf
        haproxy-tier2-contentdev-conf
        haproxy-tier2-uat-conf

[haproxy-tier2-ci-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-ci.cfg
interpreted-options = stats_socket_owner
    haproxy_socket_user

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 200

pidfile = ${deployment:run-directory}/haproxy-tier2-ci.pid

stats_socket = ${deployment:run-directory}/haproxy-tier2-ci.sock
stats_socket_owner = os.environ['USER']

haproxy_socket = ${deployment:run-directory}/haproxy-ci-backend.sock
haproxy_socket_user = os.environ['USER']

# Define the servers for each backend
ci_servers =
    server jenkins 10.50.42.51:8080 weight 1 on-error mark-down check inter 60000 rise 2 fall 2 observe layer7

[haproxy-tier2-common]
aux1_ip = 10.50.0.50
ds1_ip = 10.50.0.100
ds2_ip = 10.50.0.101
ds3_ip = 10.50.8.102
ds4_ip = 10.50.8.103
aws-ds1_ip = 10.50.24.10

haproxy_extra_config =
    reqrep ^([^\ :]*)\ .*/robots.txt\ ([^\ ]*) \1\ /robots-dev.txt\ \2 if robots

        #Set a 15 minute cache header on all 404s from the dataserver to @@avatar
        rspidel ^Cache-Control if { status 404 } { url_sub -i @@avatar }
        rspadd Cache-Control:\ max-age=900 if { status 404 } { url_sub -i @@avatar }

haproxy_extra_redirects = #

[haproxy-tier2-alpha-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-alpha.cfg
interpreted-options = stats_socket_owner
    haproxy_socket_user

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 60000

pidfile = ${deployment:run-directory}/haproxy-tier2-alpha.pid

stats_socket_owner = os.environ['USER']
stats_socket = ${deployment:run-directory}/haproxy-tier2-alpha.sock

haproxy_addr = 10.50.0.50
haproxy_socket = ${deployment:run-directory}/haproxy-tier2-backend2.sock
haproxy_socket_user = os.environ['USER']
haproxy_port = 20026
haproxy_http_port = 20020

haproxy_extra_config = 
    ${haproxy-tier2-common:haproxy_extra_config}

        acl AuthOk http_auth(overall)
        acl is_login path_beg /login
        acl is_login path_beg /dataserver2/logon
        acl is_content path_beg /content
        acl ios hdr_sub(user-agent) NextThought
        acl in_office src 156.110.43.3/31 # Office static IP from OneNet
        acl in_office src 66.210.82.130/24 # NCED static IP
        acl in_office src 156.110.241.0/24 # Datacenter public IPs
        acl in_office src 10.50.0.0/16 # Internal IPs
        acl in_office src 127.0.0.0/8 # Localhost
        acl in_office src 72.200.207.160/32 # Julie
        acl in_office src 98.162.214.29/32 # Kaley
        acl in_office src 68.97.80.153/32 # Kaley 2
        acl in_office src 162.242.30.207/32 # Mary
        acl in_office src 162.242.30.201/32 # Mary 2
        acl in_office src 73.5.69.201/32 # Ryan
        acl in_office src 72.200.203.181/32 # Jonathan
        acl in_office src 68.97.124.91/32 # Josh Z
        acl in_office src 72.198.26.201/32 # Carlos
        acl in_office src 68.12.183.133/32 # Nic
        acl in_office src 68.97.65.57/32 # Austin Powell content QA
        acl in_office src 181.137.99.118/32 # Rebecca Wilkins content QA
        http-request auth realm Alpha if !is_login !AuthOk !ios !in_office !is_content

haproxy_extra_redirects = ${haproxy-tier2-common:haproxy_extra_redirects}

haproxy_userlists =
    userlist overall
            user alphauser insecure-password alphapass2011

    userlist UsersForHistoryLanding
            user ouhistorytest insecure-password ouhistorypass1027

# Define the destination port for each backend
dataserver_port = 20021
webserver_port = 20022
node_port = 20028

# App things
loginapp_location = /login/
webapp_location = /app/

# Define the servers for each backend
dataservers =
    server data-aux1 ${haproxy-tier2-common:aux1_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

static_servers =
    acl AuthOk http_auth(UsersForHistoryLanding)
        acl is_history_landing hdr_beg(host) ou-alpha-history
        http-request auth realm History if !AuthOk is_history_landing !{ path_beg /hosted_badge_images } !{ path_beg /loginsuccess } !{ path_beg /content/ } !{ path_beg /app/ } !{ path_beg /login/ }

        server static-aux1 ${haproxy-tier2-common:aux1_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

node_servers =
    server node-aux1 ${haproxy-tier2-common:aux1_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server node-aux1-0 ${haproxy-tier2-common:aux1_ip}:21020 weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server node-aux1-1 ${haproxy-tier2-common:aux1_ip}:21021 weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server node-aux1-2 ${haproxy-tier2-common:aux1_ip}:21022 weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server node-aux1-3 ${haproxy-tier2-common:aux1_ip}:21023 weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

[haproxy-tier2-uat-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-uat.cfg
interpreted-options = stats_socket_owner
    haproxy_socket_user

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 60000

pidfile = ${deployment:run-directory}/haproxy-tier2-uat.pid

stats_socket_owner = os.environ['USER']
stats_socket = ${deployment:run-directory}/haproxy-tier2-uat.sock

haproxy_addr = 10.50.0.50
haproxy_socket = ${deployment:run-directory}/haproxy-tier2-backend4.sock
haproxy_socket_user = os.environ['USER']
haproxy_port = 20046
haproxy_http_port = 20040

haproxy_extra_config = ${haproxy-tier2-common:haproxy_extra_config}

haproxy_extra_redirects = ${haproxy-tier2-common:haproxy_extra_redirects}

haproxy_userlists =

# Define the destination port for each backend
dataserver_port = 20041
webserver_port = 20042
node_port = 20048

# App things
loginapp_location = /login/
webapp_location = /app/

# Define the servers for each backend
dataservers =
    server data-aux1 ${haproxy-tier2-common:aux1_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

static_servers =
    server static-aux1 ${haproxy-tier2-common:aux1_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

node_servers =
    server node-aux1 ${haproxy-tier2-common:aux1_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

[haproxy-tier2-contentdev-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-contentdev.cfg
interpreted-options = stats_socket_owner
    haproxy_socket_user

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 60000

pidfile = ${deployment:run-directory}/haproxy-tier2-contentdev.pid

stats_socket_owner = os.environ['USER']
stats_socket = ${deployment:run-directory}/haproxy-tier2-contentdev.sock

haproxy_addr = ${environment-contentdev:tier2-ip}
haproxy_socket = ${environment-contentdev:tier2-socket}
haproxy_socket_user = os.environ['USER']
haproxy_port = ${environment-contentdev:tier2-proxy-port}
haproxy_http_port = ${environment-contentdev:tier2-http-port}

haproxy_extra_config = ${haproxy-tier2-common:haproxy_extra_config}

haproxy_extra_redirects = ${haproxy-tier2-common:haproxy_extra_redirects}

haproxy_userlists =

# Define the destination port for each backend
dataserver_port = ${environment-contentdev:dataserver-proxy-port}
webserver_port = ${environment-contentdev:nginx-proxy-port}
node_port = ${environment-contentdev:nodejs-proxy-port}

# App things
loginapp_location = /login/
webapp_location = /app/

# Define the servers for each backend
dataservers =
    server data-aux1 ${haproxy-tier2-common:aux1_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

static_servers =
    server static-aux1 ${haproxy-tier2-common:aux1_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

node_servers =
    server node-aux1 ${haproxy-tier2-common:aux1_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

[haproxy-tier2-okstate-aws-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2-okstate-aws.cfg
interpreted-options = haproxy_addl_blocked_ip_acls
    haproxy_socket_user

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 60000
haproxy_addr = 10.50.30.236
haproxy_socket = ${deployment:run-directory}/haproxy-tier2-backend9.sock
haproxy_socket_user = os.environ['USER']
haproxy_port = 20096
haproxy_http_port = 20090

# HAproxy stats on a unix socket. See
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.2
haproxy_stats_socket = ${deployment:run-directory}/haproxy-tier2-alpha.sock

haproxy_extra_config =
    #OKState has a custom favicon.
        acl is_okstate hdr_dom(host) -i learnonline
        acl is_okstate hdr_dom(host) -i okstate
        acl is_okstate hdr_dom(host) -i okstate-alpha
        acl is_okstate hdr_dom(host) -i okstate-test
        reqrep ^([^\ :]*)\ .*/favicon\.ico \1\ /app/resources/images/okstate.nextthought.com/osu-favicon.ico if is_okstate

haproxy_extra_redirects =

# Define the destination port for each backend
dataserver_port = 20091
webserver_port = 20092
node_port = 20098

# App things
loginapp_location = /login/
webapp_location = /app/

haproxy_addl_blocked_ip_acls = ${haproxy-tier2-common:haproxy_addl_blocked_ip_acls}

# Define the servers for each backend
dataservers =
    server data-aux1 ${haproxy-tier2-common:aws-ds1_ip}:${:dataserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

static_servers =
    server static-aux1 ${haproxy-tier2-common:aws-ds1_ip}:${:webserver_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

node_servers =
    server node-aux1 ${haproxy-tier2-common:aws-ds1_ip}:${:node_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

[haproxy-tier2-base-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
files = haproxy-tier2.cfg blocked.http
interpreted-options = haproxy_addl_blocked_ip_acls

# Max Haproxy connections (depends on ulimit)
haproxy_maxconn = 60000

# symmys wants their custom favicon. This was the most expedient way to do it -cutz 8/13/2014
haproxy_extra_config =
    acl is_symmys hdr_dom(host) -i symmys
        acl is_symmys hdr_dom(host) -i symmys-alpha
        acl is_symmys hdr_dom(host) -i lab
        acl is_symmys hdr_dom(host) -i labs
        reqrep ^([^\ :]*)\ .*/favicon\.ico \1\ /app/resources/images/symmys.nextthought.com/symmys_favicon.ico if is_symmys

        acl is_symmys_down hdr_dom(host) -i lab
        acl is_symmys_down hdr_dom(host) -i labs
        acl is_symmys_down_app url_beg -i /app
        acl is_symmys_down_login url_reg -i /login$
        acl is_symmys_down_login url_reg -i /login/$
        reqrep ^([^\ :]*)\ .*/*\.html \1\ /login/symmys-down.html if is_symmys_down
        reqrep ^([^\ :]*)\ .*/login/*\.html \1\ /login/symmys-down.html if is_symmys_down
        reqrep ^([^\ :]*)\ .*/symmys_arpm_logo\.jpg \1\ /login/resources/images/symmys_arpm_logo.jpg if is_symmys_down

haproxy_extra_redirects =
    redirect location / if is_symmys_down_app is_symmys_down
        redirect location / if is_symmys_down_login is_symmys_down

# Define the destination port for each backend
haproxy_app_backend0_port = 20006
haproxy_app_backend1_port = 20016
haproxy_app_backend2_port = 20026
haproxy_app_backend3_port = 20036
haproxy_app_backend4_port = 20046
haproxy_app_backend5_port = 20056
haproxy_app_backend6_port = 20066
haproxy_app_backend7_port = 20070
haproxy_app_backend8_port = 20086

aux1_ip = 10.50.0.50
ds1_ip = 10.50.0.100
ds2_ip = 10.50.0.101
ds3_ip = 10.50.8.102
ds4_ip = 10.50.8.103

# Define the servers for each backend
haproxy_app_backend0 =
    server app100 ${:ds1_ip}:${:haproxy_app_backend0_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server app101 ${:ds2_ip}:${:haproxy_app_backend0_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server app102 ${:ds3_ip}:${:haproxy_app_backend0_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server app103 ${:ds4_ip}:${:haproxy_app_backend0_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

haproxy_app_backend1 =
    server app100 ${:ds1_ip}:${:haproxy_app_backend1_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server app101 ${:ds2_ip}:${:haproxy_app_backend1_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server app102 ${:ds3_ip}:${:haproxy_app_backend1_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server app103 ${:ds4_ip}:${:haproxy_app_backend1_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

haproxy_app_backend2 =
    server app50 ${:aux1_ip}:${:haproxy_app_backend2_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

haproxy_app_backend3 =
    server app100 ${:ds1_ip}:${:haproxy_app_backend3_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server app101 ${:ds2_ip}:${:haproxy_app_backend3_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server app102 ${:ds3_ip}:${:haproxy_app_backend3_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
        server app103 ${:ds4_ip}:${:haproxy_app_backend3_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

haproxy_app_backend4 =
    server app50 ${:aux1_ip}:${:haproxy_app_backend4_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

haproxy_app_backend5 =
    server app50 ${:aux1_ip}:${:haproxy_app_backend5_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

haproxy_app_backend6 =
    server app102 ${:ds3_ip}:${:haproxy_app_backend6_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

haproxy_app_backend7 =
    server app50 ${:aux1_ip}:${:haproxy_app_backend7_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7

haproxy_app_backend8 =
    server app102 ${:ds3_ip}:${:haproxy_app_backend8_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy
    server app103 ${:ds4_ip}:${:haproxy_app_backend8_port} weight 1 on-error mark-down check inter 2000 rise 2 fall 2 observe layer7 send-proxy

# HAproxy stats on a unix socket. See
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.2
haproxy_stats_socket = ${deployment:run-directory}/haproxy-tier1.sock
haproxy_priviledged_stats_socket = ${deployment:run-directory}/haproxy-tier1-priviledged.sock
# TODO: There are recipes that enumerate other sections; we
# probably want to use those here to avoid having to
# manually list out all server ips again. Alternatively,
# our own meta recipe.

