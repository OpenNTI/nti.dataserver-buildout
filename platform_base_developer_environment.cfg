[buildout]
extends =
		nodeapps_prod.cfg
		haproxy_nginx_environment.cfg
		zeo_mixin.cfg
		dataserver_buildout.cfg

always-checkout = true
# NOTE: When extending multiple base configs,
# only the parts from the bottom config are
# installed by default (even if they all use 'parts +=').
# So if we want to install parts from both configs,
# we need to explicitly list them.
parts +=
		zlib
		pcre
		haproxy
		ssl-cert
		nginx
		nginx-conf
		haproxy-conf
		webapp-conf
		nodeserver-env
		client-site-package-conf
		client-site-package
		ou-sso-dev-cert
		ou-sso-dev-key
		${site-ALL-nginx:nginx}

[environment-haproxy]
ssl_cert = ${ssl-cert:pki_dir}/localhost.pem

[zcml]
package_features += devmode

[server-versions]
sites = @HEAD

[passwords]
file = dev_passwords.pass.cast5

[aws-s3]
bucket-name = nti-dataserver-dev
access-key = ***REMOVED***
secret-key = ${passwords:aws_s3_secret_access_key}

[boto]
aws_access_key_id = ***REMOVED***
aws_secret_access_key = ${passwords:aws_secret_access_key}

[nginx-conf]
nginx_daemon = off
nginx_max_open_files = 1000

[haproxy-conf]
haproxy_backend_port_rewrite =
	# Did the incoming Host header have a port in it? If so,
	# we will want to rewrite outgoing Location headers from nginx to
	# have the right port...nginx would put its own port in if we let
	# it, which is not right for any scenario; turning them off entirely
	# works for production when we are on the default ports, but fails
	# badly for development when we're not.
	# Our stunnel socket is always SSL, and is the only thing that is in development
	acl is_ssl so_id 42

	rspirep ^Location:\ http://([^0-9/].*?)/(.*) Location:\ http://\1:${environment-haproxy:http_port}/\2 unless is_ssl
	rspirep ^Location:\ .*://([^0-9/].*?)/(.*) Location:\ https://\1:${environment-haproxy:ssl_port}/\2 if is_ssl

backends =
    ${:static_backend}

    ${:content_backend}

    ${:data_backend}

    ${:node_backend}

static_backend =
    backend static_backend
        mode	http
        balance roundrobin
        option prefer-last-server

        ${:haproxy_backend_port_rewrite}

        timeout server 15m
        timeout connect 4s

        option httpchk GET /_ops/ping HTTP/1.1\r\nHost:\ ${:hostname}

        ${:nginx_servers}

content_backend =
    backend content_backend
        mode http
        balance roundrobin
        option prefer-last-server

        timeout server 15m
        timeout connect 4s

        option httpchk GET /_ops/ping HTTP/1.1\r\nHost:\ ${:hostname}

        ${:content_servers}

data_backend =
    backend data_backend
        mode	http
        balance roundrobin
        option prefer-last-server

        option httpchk GET /_ops/ping HTTP/1.1\r\nHost:\ ${:hostname}

        ${:dataserver_servers}

node_backend =
    backend node_backend
        mode http
        balance roundrobin
        option prefer-last-server

        timeout server 15m
        timeout connect 4s

        option httpchk GET /mobile/api/_ops/ping HTTP/1.1\r\nHost:\ ${:hostname}

        ${:nodejs_servers}

[webapp-conf]
enable_logging = true
enable_global_onerror = false

[init_env]
# For development, install the initial test data and users
args = --with-example

[environment]
cache_servers = localhost:${memcached-conf:memcached-port}

[pserve-conf]
use_devmode = 1
secure_cookies = 0
debug_error_in_html = true
cookie_secret = devmode cookie secret
session_cookie_secret = devmode session cookie secret
pyramid_includes = pyramid_debugtoolbar

[gunicorn-conf]
# Make it easy to debug by using one worker
# and not preloading
workers = 1
preload_app = False

[site-history-nginx]
landingpage_path = ${buildout:root-directory}/sources/nti.content.landingpage.historychannel/client.history-channel/dist

[site-i2-nginx]
extra_config =
	location ~ ^/widgets/([A-Za-z0-9_-]+)$ {
		return 301 $uri_scheme://$host/widgets/$1/;
	}

	location ~ ^/widgets/([A-Za-z0-9_-]+)/$ {
		alias ${buildout:directory}/node_modules/nti-web-widget-$1/dist/;
	}

	location ~ ^/widgets/([A-Za-z0-9_-]+)/(.+)$ {
		alias ${buildout:directory}/node_modules/nti-web-widget-$1/dist/$2;
	}


[site-janux-nginx]
extra_config =
	location ~* /masters/([A-Za-z0-9_-]*)$ {
		return 301 $uri_scheme://$host/masters/$1/;
	}

	location /masters/ {
		proxy_pass http://masters-alpha.ou.edu.s3-website-us-east-1.amazonaws.com/;
		proxy_intercept_errors on;
		error_page 403 @login;
		error_page 404 @login;
	}

[site-okstate-nginx]
extra_config =
	location ~* /courses/([A-Za-z0-9_-]*)$ {
		return 301 $uri_scheme://$host/courses/$1/;
	}

	location /courses/ {
		proxy_pass http://okstate-courses-alpha.nextthought.com.s3-website-us-east-1.amazonaws.com/;
		proxy_intercept_errors on;
		error_page 403 @login;
		error_page 404 @login;
	}

[client-site-package-conf]
recipe = nti.recipes.json
output-file = ${buildout:directory}/package.json
contents-section = client-site-package-conf-main

[client-site-package-conf-main]
name = nti-buildout-dev
version = 0.0.1
description = NextThought Buildout Developer NodeJS Library
author = NextThought
private = true
dependencies-section = client-site-package-conf-deps

[client-site-package-conf-deps]
nti-client-sites-alpha = *
@nti/client-sites-apple-rwi = *
@nti/client-sites-bellwetherenterprise = *
@nti/client-sites-careoklahoma = *
nti-client-sites-changemaker = *
@nti/client-sites-chegg = *
nti-client-sites-columbia = *
nti-client-sites-connect = *
@nti/client-sites-darelearning = *
@nti/client-sites-default = *
@nti/client-sites-dta = *
nti-client-sites-edbooks = *
@nti/client-sites-esteem = *
nti-client-sites-gen-lab = *
nti-client-sites-greatexpectations = *
nti-client-sites-i2 = *
@nti/client-sites-iiaok = *
nti-client-sites-iled = *
nti-client-sites-janux = *
nti-client-sites-k20 = *
nti-client-sites-litworld = *
@nti/client-sites-macsw = *
nti-client-sites-mathcounts = *
nti-client-sites-movingup = *
@nti/client-sites-nahb = *
@nti/client-sites-nrwa = *
nti-client-sites-oc = *
nti-client-sites-okstate = *
nti-client-sites-ona = *
@nti/client-sites-opsrc = *
nti-client-sites-osde = *
@nti/client-sites-pdca = *
nti-client-sites-prmia = *
@nti/client-sites-proximity = *
@nti/client-sites-rdn1 = *
@nti/client-sites-rntpros = *
nti-client-sites-symmys = *
nti-client-sites-santafesouth = *
nti-client-sites-spurstartup = *
nti-client-sites-wiley = *
@nti/content-landingpage-associationsnext = *
nti-content-landingpage-connect = *
nti-content-landingpage-iled = *
nti-content-landingpage-janux = *
nti-content-landingpage-okstate = *
@nti/environment-support = *
nti-lib-vendor = *
@nti/web-app = ^2018.16.0-alpha.0
@nti/web-login = ^2018.10.0-alpha.0
@nti/web-mobile = ^2018.16.0-alpha.0
@nti/web-service = ^1.21.0-alpha.0

[client-site-package]
recipe = collective.recipe.cmd
on_install = true
on_update = true
site-asset-package = ${buildout:root-directory}
cmds =
	 pushd ${:site-asset-package}
	 npm install
	 npm update
	 popd

[supervisor]
metadata-opts = -v --slugs
pserve_group_programs = pserve,analytics,metadata,solr_indexer,library_renderer
dataserver_programs = 
		999 pserve ${deployment:root-directory}/bin/nti_pserve [${:pserve-ini}]
		99 analytics ${deployment:bin-directory}/nti_analytics_processor [-v]
		99 library_renderer ${deployment:bin-directory}/nti_library_renderer [-v -r 1 -s 2]
		99 metadata ${deployment:bin-directory}/nti_metadata_processor [${:metadata-opts}]
		${solr:solr_indexer-supervisor}
web_programs = 
		1 node (autostart=true) node [${deployment:root-directory}/node_modules/.bin/web-service --protocol proxy --env production --config ${deployment:root-directory}/etc/nodeserver-env.json] ${deployment:root-directory}/bin
programs =
		${:dataserver_programs}
		${:web_programs}
		${zeo-conf:zeo-supervisor}
		${redis-conf:redis-supervisor}
		${memcached-conf:memcached-supervisor}
		1 nginx ${deployment:bin-directory}/nginx
		1 haproxy ${deployment:bin-directory}/haproxy [-f ${deployment:etc-directory}/haproxy/haproxy.cfg -db]
		${solr:solr-supervisor}

# Turn these off for developers since they don't do
# any good, and they probably don't work anyway
[crashmail_pserve]
supervisor =

[fatalmail]
supervisor =
