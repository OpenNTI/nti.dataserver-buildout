[buildout]
extends =
	logrotate.cfg
	webapps.cfg
	haproxy_nginx_environment.cfg
	relstorage_environment.cfg
	badges.cfg
	analytics.cfg
	sites.cfg
	landingpages.cfg
	ims.cfg
	solr.cfg

always-checkout = true
# NOTE: When extending multiple base configs,
# only the parts from the bottom config are
# installed by default (even if they all use 'parts +=').
# So if we want to install parts from both configs,
# we need to explicitly list them.
parts +=
	logrotate
	logrotate-conf
	logrotate-cron
	haproxy
	nginx
	nginx-conf
	haproxy-conf
	qp-cron
	npm
	client-site-package-conf
	client-site-package
	feed-utility-conf
	nodeserver-env
	nodeserver
  	deploy-mobile-app
	app-minify
	tahrir-conf
	analytics-conf
	site-okstate-nginx
	solr-conf

[product-sources]
<= 	product-courses-sources

[solr-sources]
<= solr-ALL-sources

[site-sources]
<=	site-okstate-sources

[zcml]
package_features +=	no_avatar
					production_env

[eggs]
eggs +=
		${badges-ALL-eggs:eggs}
		${site-okstate-eggs:eggs}
		${analytics-ALL-eggs:eggs}
		${product-courses-eggs:eggs}
		${solr-ALL-eggs:eggs}

[webapp-versions]
NextThoughtWebApp = branch=release/2017-01-27
NextThoughtLoginApp = @88791
MobileApp = branch=release/2017-01-12

[server-versions]
All = @105324
sites = @105324

[solr-conf]
files = 785-okstate-solr.zcml

[landingpage-versions]
okstate = branch=master

[site-versions]
okstate =  branch=master

[app-minify]
analytics-key = -a UA-25900586-5,okstate.edu
# Set this to --itunes=XXX to get an iOS safari banner for an app
#itunes = --itunes=795983686

[nodeserver-env]
analytics-key = UA-25900586-5
app-version = ${webapp-versions:MobileApp}
dataserver-port = ${environment:dataserver_http_port}

[passwords]
file = okstate_passwords.pass.cast5

[roles]
# Permission some accounts with special capabilities
files += 667-prod-rolemap.zcml

[relstorages]
shared-blob-dir = false
storages = Users

[relstorages_opts]
sql_adapter_extra_args =
					port 20094
					driver umysqldb

[relstorages_users_storage_opts]
sql_host = 10.50.10.202
sql_passwd = ${passwords:sql_users_passwd}

[environment]
sql_user = ntiuser
cache_servers = 10.50.10.203:20095
smtp_server = email-smtp.us-east-1.amazonaws.com
smtp_username = AKIAIOO43PY4ANWEYP2Q
smtp_port = 587
global_host_name = learnonline.okstate.edu
global_content_directory = ${buildout:directory}/../DataserverGlobalLibrary
global_content_location = /content/

nginx_proxy_port = 20092
dataserver_http_port = 20091
nodejs_http_port = 20098
haproxy_http_port = 20090
# SAJ: listen to all interfaces to allow load balancers to submit
# decrypted SSL traffic for processing
haproxy_http_addr = 0.0.0.0

# Because of the order of inclusion, we need this here
webapp_path = ${buildout:sources-dir}/nti.web.app
loginapp_path = ${buildout:sources-dir}/NextThoughtLoginApp

[environment-haproxy]
proxy_port = 20096

[nginx-conf]
# Reseting global_host_name to not stomp on the site asset configs
global_host_name = ""
nginx_daemon = off
nginx_ip = 0.0.0.0
nginx_extra_binds = 

# The default landing site name. Set this in environments
# that only hae one landing site so that deep links
# work even without the site cookie.
default_landing_site_name = 'learnonline.okstate.edu'

# Since we have the whole machine, let nginx
# pick its own worker count
nginx_workers = auto

[haproxy-conf]
haproxy_addl_ssl_acls = acl is_ssl so_id ${:haproxy_proxy_port}
ssl_binds = 

[main-conf]
recipe = z3c.recipe.filetemplate
extends = environment
source-directory = templates
dest-directory = ${deployment:root-directory}
force-overwrite = true
files = main.ini

redis_client_url = redis://10.50.10.203:20093
memcached_servers = ${environment:cache_servers}

[tahrir]
dbname = Tahrir
user = ntitahrir
twophase = True
autocommit = False
driver = mysql+pymysql
host = 10.50.10.203:20094
password = ${passwords:sql_users_passwd}

[tahrir-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = 888-nti.app.tahrir.zcml

[analytics]
dbname = Analytics
user = ntianalytics
twophase = True
autocommit = False
driver = mysql+pymysql
host = 10.50.10.203:20094
password = ${passwords:sql_users_passwd}

[analytics-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = 777-nti.app.analytics.zcml

[pserve-conf]
email_error_subject_prefix = OKState Error:
dataserver_log_level = INFO
email_externally = true

[gunicorn-conf]
preload_app = true

# Limit requests before restart
# max_requests = 3500
# Distribute load better across instances
worker_connections = 250
# Match workers to pool-size to available memcache connections
# Go slightly below that to try to optimize db cache, since load
# doesn't seem to touch 40 workers
workers = 5

[library-conf]
library-type = filesystemLibrary
library-args =
			directory="${environment:global_content_directory}"
			prefix="${environment:global_content_location}"

[webapp-conf]
enable_logging = true
allow_mobile_safari = true
unauth_location = /login/
features =
		"presence-menu": true,
		"custom-status": true,
		"state-transactions": true,
		"mutable-forums": true,
		"v2contacts" : true,
		"v2profiles": true,
		"fancy-scroll": true,
		"notepad": false,
		"transcript-follow-video": true,
		"threaded-forums":true,
		"video-settings":true,
		"remove-history-tab": true,
		"bulk-resolve-users": false,
		"kaltura.progressive": true,
		"request-alias-change": true,
		"show-open-students-first":false,
		"v3matching":true,
		"notifications": true,
		"analytic-reports":true,
		"capture-analytics":true,
		"section-switcher":true,
		"sync-pageinfo-and-outlinenode":true,
		"hide-add-books":true,
		"default-avatar-to-initials":true,
		"instructor-email":true,
		"email-verification":true,
		"profile-activity-filters":true,
		"file-upload":true,
		"badges":true

obscure_usernames = true

# Open external PDF Content Card links in a new tab
external_pdf_new_window = true

[site-okstate-nginx]
extra_config =
	location ~* /courses/([A-Za-z0-9_-]*)$ {
		return 301 $uri_scheme://$host/courses/$1/;
	}

	location /courses/ {
		proxy_pass http://okstate-courses.nextthought.com.s3-website-us-east-1.amazonaws.com/;
		proxy_intercept_errors on;
		error_page 403 @login;
		error_page 404 @login;
	}

[client-site-package-conf]
recipe = nti.recipes.json
output-file = ${buildout:directory}/package.json
contents-section = client-site-package-conf-main

[client-site-package-conf-main]
name = nti-buildout-okstate
version = 0.0.1
description = NextThought Buildout OKState NodeJS Library
author = NextThought
private = true
dependencies-section = client-site-package-conf-deps

[client-site-package-conf-deps]
nti-client-sites-okstate = ^0.0
nti-content-landingpage-okstate = ^1.0
nti-web-service = 1.1.1

[client-site-package]
recipe = collective.recipe.cmd
on_install = true
on_update = true
site-asset-package = ${buildout:root-directory}
cmds =
	 pushd ${:site-asset-package}
	 ${buildout:root-directory}/bin/npm install
	 ${buildout:root-directory}/bin/npm update
	 popd

[feed-utility-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = fetch_feed

[supervisor]
# Disable supervisord based log rotation because we have switched to using logrotate
logfile-maxbytes = 0
childstdout-logfile-maxbytes = 0
childstderr-logfile-maxbytes = 0
# Don't wipe away existing logs
nocleanup = True
pserve_group_programs = pserve,analytics,metadata,solr_indexer
programs =
         1 nginx ${deployment:bin-directory}/nginx
         1 haproxy ${deployment:bin-directory}/haproxy [-f ${deployment:etc-directory}/haproxy/haproxy.cfg -db]
         1 node ${deployment:bin-directory}/node [${deployment:root-directory}/node_modules/nti-web-service/ -l ${nodeserver-env:node-ip} -p ${nodeserver-env:http-port} --dataserver-host ${nodeserver-env:dataserver-ip} --dataserver-port ${nodeserver-env:dataserver-port} --protocol proxy --config ${deployment:root-directory}/etc/nodeserver/nodeserver-env.json]
         99 analytics ${deployment:bin-directory}/nti_analytics_processor [-v --site okstate.nextthought.com]
         999 pserve ${deployment:root-directory}/bin/nti_pserve [${:pserve-ini}]
         99 metadata ${deployment:bin-directory}/nti_metadata_processor [-v -m 5 -x 10]
         99 solr_indexer (autostart=false) ${deployment:bin-directory}/nti_solr_indexer [-v]

[boto]
aws_access_key_id = AKIAJVAIKRRDR5CL4OBQ
aws_secret_access_key = ${passwords:aws_secret_access_key}
