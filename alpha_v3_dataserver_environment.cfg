[buildout]
extends =
		logrotate.cfg
		relstorage_environment.cfg
		badges.cfg
		analytics.cfg
		sites.cfg
		ims.cfg
		solr.cfg
		saml_conf.cfg
		completion.cfg
		invitations.cfg
		presentation.cfg
		contentrendering.cfg
		courseware_content.cfg

always-checkout = true
# NOTE: When extending multiple base configs,
# only the parts from the bottom config are
# installed by default (even if they all use 'parts +=').
# So if we want to install parts from both configs,
# we need to explicitly list them.
parts =
		logrotate-conf
		logrotate-cron
		on-site-logs-cron
		off-site-logs-cron
		cython
		lxml
		pillow
		eggs
		checkversions
		passwords
		directories
		zcml
		main-conf
		pserve-conf
		gunicorn-conf
		library-conf
		clean-pyc
		roles
		supervisor
		nginx-conf
		relstorages
		qp-cron
		tahrir-conf
		analytics-conf
		analytics-accenturerwi-conf
		analytics-arlensa-conf
		analytics-associationlearning-conf
		analytics-cceducare-conf
		analytics-changemaker-conf
		analytics-columbia-conf
		analytics-demo-conf
		analytics-dpcedcenter-conf
		analytics-edbooks-conf
		analytics-ensync-conf
		analytics-epiccharterschools-conf
		analytics-greatexpectations-conf
		analytics-i2-conf
		analytics-iled-conf
		analytics-k20-conf
		analytics-litworld-conf
		analytics-movingup-conf
		analytics-odapca-conf
		analytics-okbfaa-conf
		analytics-ona-conf
		analytics-osde-conf
		analytics-prmia-conf
		analytics-rwi-conf
		analytics-spurstartup-conf
		feed-utility-conf
		solr-conf
		phantomjs
		imagemagick
		ou-sso-dev-cert
		ou-sso-dev-key
		idp-conf
		janux-saml-conf

[site-sources]
<= site-ALL-sources

[product-sources]
<= product-ALL-sources

[solr-sources]
<= solr-ALL-sources

[completion-sources]
<= completion-ALL-sources

[courseware-ALL-sources]
<=  invitations-ALL-sources
	presentation-ALL-sources
	courseware-content-ALL-sources

[zcml]
package_features += alpha_env
					no_avatar

[eggs]
eggs +=
		${site-ALL-eggs:eggs}
		${solr-ALL-eggs:eggs}
		${badges-ALL-eggs:eggs}
		${product-ALL-eggs:eggs}
		${analytics-ALL-eggs:eggs}
		${completion-ALL-eggs:eggs}
		${invitations-ALL-eggs:eggs}
		${presentation-ALL-eggs:eggs}
		${contentrendering-MAIN-eggs:eggs}
		${courseware-content-ALL-eggs:eggs}
		pygraphviz

[versions]
ZODB = 5.4.0

[server-versions]
All = @127626
sites = @127626
server = branch=master
dataserver = ${server-versions:server}
geventwebsocket = ${server-versions:server}

[analytics-versions]
analytics = ${server-versions:server}
app.analytics = ${server-versions:server}
app.learning_network = ${server-versions:server}
app.registration = ${server-versions:server}
database = ${server-versions:server}
learning_network = ${server-versions:server}
registration = ${server-versions:server}

[assessment-versions]
app_assessment = ${server-versions:server}
assessment = ${server-versions:server}
openmath = ${server-versions:server}
plasTeX = ${server-versions:server}

[async-versions]
async = ${server-versions:server}
app_async = ${server-versions:server}

[ats-versions]
imis = ${server-versions:server}

[badges-versions]
badges = ${server-versions:server}
tahrir = ${server-versions:server}

[base-versions]
base = ${server-versions:server}
containers = ${server-versions:server}
dublincore = ${server-versions:server}
intid = ${server-versions:server}
futures = ${server-versions:server}
ntiids = ${server-versions:server}
plone.namedfile = ${server-versions:server}

[courseware-versions]
admin = ${server-versions:server}
scorm = ${server-versions:server}
store = ${server-versions:server}
badges = ${server-versions:server}
content = ${server-versions:server}
courses = ${server-versions:server}
reports = ${server-versions:server}
courseware = ${server-versions:server}

[dataserver-base-versions]
app.site = ${server-versions:server}
identifiers = ${server-versions:server}
links = ${server-versions:server}

[ims-versions]
app_ims = ${server-versions:server}
courseware_ims = ${server-versions:server}
ims = ${server-versions:server}

[messaging-versions]
app_messaging = ${server-versions:server}
messaging = ${server-versions:server}

[product-versions]
ou = ${server-versions:server}
gradebook = ${server-versions:server}

[publishing-versions]
app_publishing = ${server-versions:server}
publishing = ${server-versions:server}

[completion-versions]
app_completion = ${server-versions:server}
completion = ${server-versions:server}

[recipe-versions]
json = ${server-versions:server}
passwords = ${server-versions:server}
zodb = ${server-versions:server}

[recorder-versions]
app_recorder = ${server-versions:server}
recorder = ${server-versions:server}

[rendering-versions]
rendering = ${server-versions:server}
assessment = ${server-versions:server}
tools = ${server-versions:server}
content-deployment = ${server-versions:server}

[reports-versions]
app_reports = ${server-versions:server}
reports = ${server-versions:server}

[store-versions]
contentlibrary_store = ${server-versions:server}

[logrotate-cron]
logrotate-bin = /usr/sbin/logrotate

[on-site-logs-cron]
recipe = z3c.recipe.usercrontab
rsync-bin = /usr/bin/rsync
times = 5,20,35,50 * * * *
command = ${:rsync-bin} -a "${deployment:log-directory}" "ntibackup@aux1.4pp:/srv/backups/logs/alpha-v3/$HOSTNAME/"

[off-site-logs-cron]
recipe = z3c.recipe.usercrontab
rsync-bin = /usr/bin/rsync
times = 10,25,40,55 * * * *
command = ${:rsync-bin} -a "${deployment:log-directory}" "10.50.30.64::logs/alpha-v3/$HOSTNAME/"

[MySQL-python]
environment =
rpath =
library-dirs = /usr/lib
include-dirs = /usr/include

[solr-conf]
files = 785-alpha-solr.zcml

[passwords]
file = alpha_v3_passwords.pass.cast5

[roles]
# Permission some accounts with special capabilities
files += 667-alpha-rolemap.zcml

[relstorages]
shared-blob-dir = false
storages = Users Users_1 Users_2
enable-persistent-cache = true
cache-local-mb = 300
cache-local-dir-count = 4

[relstorages_opts]
sql_adapter_extra_args =
						port 3306
						driver umysqldb

[relstorages_users_storage_opts]
sql_host = db1.alpha
sql_passwd = ${passwords:sql_users_passwd}

[relstorages_users_1_storage_opts]
sql_host = db1.alpha
sql_passwd = ${passwords:sql_users_1_passwd}

[relstorages_users_2_storage_opts]
sql_host = db1.alpha
sql_passwd = ${passwords:sql_users_2_passwd}

[environment]
sql_user = ntiuser
sql_host = db1.alpha
cache_servers =
smtp_server = email-smtp.us-east-1.amazonaws.com
smtp_username = AKIAIOO43PY4ANWEYP2Q
smtp_port = 587
global_host_name = alpha.nextthought.com
global_content_directory = ${buildout:directory}/../DataserverGlobalLibrary
global_content_location = /content/

haproxy_http_port = 2080

# Because of the order of inclusion, we need this here
webapp_path = ${buildout:sources-dir}/nti.web.app
loginapp_path = ${buildout:sources-dir}/NextThoughtLoginApp

[main-conf]
redis_client_url = redis://redis.alpha:6379
memcached_servers = memcached.alpha:11211

[pserve-conf]
email_error_subject_prefix = Alpha Error:
concurrent_enrollment_addresses = nti-testing@nextthought.com
i2_enrollment_addresses = nti-testing@nextthought.com josh.zuech@nextthought.com
purchase_additional_confirmation_addresses = alpha-support@nextthought.com

[gunicorn-conf]
preload_app = true
# Distribute load better across instances
worker_connections = 250
workers = 4

[nginx-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
# the main conf file is already installed
# as part of building nginx, we must overwrite it
force-overwrite = true
files = nginx.conf fastcgi.conf fastcgi_params koi-utf koi-win mime.types scgi_params uwsgi_params win-utf dataserver_caching.conf

# Core Settings
nginx_daemon = off
nginx_user = ntiuser
nginx_workers = 2
aio = aio on;

# Logging knobs
nginx_access_log = /dev/stdout
nginx_access_log_options = main buffer=4k flush=1m
nginx_error_log = /dev/stderr
nginx_error_log_level = warn

# PID file
nginx_pidfile = ${deployment:run-directory}/nginx.pid

# How many files to keep in the open cache. This should be
# at least 60K in production (smaller in dev where ulimits
# are usually not set up)
nginx_max_open_files = 60000

# Cache options
global_host_name = ""
global_content_directory = ${buildout:directory}/../DataserverGlobalLibrary
global_content_origin = http://content-origin1.alpha:8080
hosted_badge_images_directory = ${environment:hosted_badge_images_directory}
hosted_badge_images_location = ${environment:hosted_badge_images_location}
nginx_ip = 0.0.0.0
nginx_proxy_port = ${environment:nginx_proxy_port}
nginx_extra_binds =
nginx_dataserver_port = lb.alpha:${environment:haproxy_http_port}
nginx_cache_path = ${deployment:cache-directory}/nginx
nginx_cache_options = max_size=1g inactive=60m use_temp_path=off
nginx_extra_server_config =

[nginx-conf:macosx]
# AIO is not even a directive on osx
aio =

[tahrir]
dbname = Tahrir
user = ntitahrir
twophase = True
autocommit = False
driver = mysql+pymysql
host = db1.alpha:3306
password = ${passwords:sql_users_passwd}

[tahrir-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = 888-nti.app.tahrir.zcml

[janux-saml-conf]
entityid = janux.dev
description = Janux Development
server_uri = https://ou-alpha.nextthought.com

[analytics]
dbname = Analytics
user = ntianalytics
twophase = True
autocommit = False
driver = mysql+pymysql
host = db1.alpha:3306
password = ${passwords:sql_users_passwd}

[analytics-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = 777-nti.app.analytics.zcml

[analytics-oc]
dbname = Analytics_OC
user = ntianalytics
twophase = True
autocommit = False
driver = mysql+pymysql
host = db1.alpha:3306
password = ${passwords:sql_users_passwd}

[oc-analytics-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = 779-nti.app.sites.oc.zcml

[analytics-changemaker-conf]
host = db1.alpha:3306

[analytics-columbia-conf]
host = db1.alpha:3306

[analytics-edbooks-conf]
host = db1.alpha:3306

[analytics-k20-conf]
host = db1.alpha:3306

[analytics-prmia-conf]
host = db1.alpha:3306

[analytics-spurstartup-conf]
host = db1.alpha:3306

[analytics-greatexpectations-conf]
host = db1.alpha:3306

[analytics-i2-conf]
host = db1.alpha:3306

[analytics-iled-conf]
host = db1.alpha:3306

[analytics-litworld-conf]
host = db1.alpha:3306

[analytics-movingup-conf]
host = db1.alpha:3306

[analytics-ona-conf]
host = db1.alpha:3306

[analytics-osde-conf]
host = db1.alpha:3306

[analytics-rwi-conf]
host = db1.alpha:3306

[analytics-cceducare-conf]
host = db1.alpha:3306

[analytics-epiccharterschools-conf]
host = db1.alpha:3306

[analytics-accenturerwi-conf]
host = db1.alpha:3306

[analytics-arlensa-conf]
host = db1.alpha:3306

[analytics-associationlearning-conf]
host = db1.alpha:3306

[analytics-dpcedcenter-conf]
host = db1.alpha:3306

[analytics-odapca-conf]
host = db1.alpha:3306

[analytics-okbfaa-conf]
host = db1.alpha:3306

[analytics-demo-conf]
host = db1.alpha:3306

[analytics-ensync-conf]
host = db1.alpha:3306

[library-conf]
library-type = filesystemLibrary
library-args =
			 directory="${environment:global_content_directory}"
			 prefix="${environment:global_content_location}"

[feed-utility-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
files = fetch_feed

[fetch-okstate-feed]
recipe = z3c.recipe.usercrontab
times = 30 3,9,15,21 * * *
command = ${deployment:bin-directory}/fetch_feed okstate-001 ${deployment:run-directory}/feed/okstate

[fetch-ou-feed]
recipe = z3c.recipe.usercrontab
times = 30 3,9,15,21 * * *
command = ${deployment:bin-directory}/fetch_feed ou-002 ${deployment:run-directory}/feed/OU

[supervisor]
# Disable supervisord based log rotation because we have switched to using logrotate
logfile-maxbytes = 0
childstdout-logfile-maxbytes = 0
childstderr-logfile-maxbytes = 0
# Don't wipe away existing logs
nocleanup = True
pserve_group_programs = pserve,analytics,metadata,solr_indexer,library_renderer
programs =
        999 pserve ${deployment:root-directory}/bin/nti_pserve [${:pserve-ini}]
        99 solr_indexer (autostart=false) ${deployment:bin-directory}/nti_solr_indexer [-v]
        99 analytics (autostart=false) ${deployment:bin-directory}/nti_analytics_processor [-v]
        99 metadata (autostart=false) ${deployment:bin-directory}/nti_metadata_processor [-v]
        99 library_renderer (autostart=false) ${deployment:bin-directory}/nti_library_renderer [-v -r 1 -s 2]
        99 nginx /usr/sbin/nginx [-c /home/ntiuser/buildout/etc/nginx/nginx.conf]

[boto]
aws_access_key_id = AKIAJVAIKRRDR5CL4OBQ
aws_secret_access_key = ${passwords:aws_secret_access_key}
