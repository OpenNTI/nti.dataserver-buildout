[buildout]
extends =
		deployment.cfg
		pcre.cfg
		openssl.cfg

parts =
	  directories
	  zlib
	  pcre
	  openssl
	  haproxy

[haproxy]
recipe = hexagonit.recipe.cmmi
url = http://www.haproxy.org/download/1.8/src/haproxy-1.8.14.tar.gz
keep-compile-dir = false
configure-command = true
target = generic
make-options =
			 USE_PCRE=1
			 USE_OPENSSL=1
			 USE_ZLIB=1
			 CPU=native
			 TARGET=${:target}
			 PREFIX=${buildout:parts-directory}/${:_buildout_section_name_}
			 DESTDIR=
			 SBINDIR=${deployment:bin-directory}
			 SSL_LIB=${openssl:location}/lib
			 SSL_INC=${openssl:location}/include
			 ZLIB_LIB=${zlib:location}/lib
			 ZLIB_INC=${zlib:location}/include
			 PCRE_LIB=${pcre:location}/lib
			 PCRE_INC=${pcre:location}/include
			 ${:extra-configure-options}

[haproxy:linux]
target = linux2628
extra-configure-options =
			 ADDLIB="-Wl,-rpath=${openssl:location}/lib -Wl,-rpath=${zlib:location}/lib -Wl,-rpath=${pcre:location}/lib"
			 USE_STATIC_PCRE=1

[haproxy:macosx]
target = osx
patches =
		${buildout:directory}/patches/haproxy/osx/patch-Makefile.diff
extra-configure-options =

[haproxy-conf]
recipe = z3c.recipe.filetemplate
source-directory = templates
dest-directory = ${deployment:root-directory}
# the main conf file is already installed
# as part of building nginx, we must overwrite it
force-overwrite = true
files = haproxy.cfg blocked.http ip_blacklist.map rproxy.map
interpreted-options =
	ip_blacklist
	proxy_socket_owner
	ssl_socket_owner

maxconn = 16366

extra_globals =
    # SSL Tuning
        tune.ssl.default-dh-param 2048
        tune.ssl.cachesize 20000
        ssl-default-bind-ciphers ${:ciphers}
        ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
        ssl-default-server-ciphers ${:ciphers}
        ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

        # Set to use 2 processes. Process 1 is for processing normal traffic.
        # Processes 2 are for SSL operations.
        nbproc 2

extra_defaults =
    #

# SSL options
ciphers = ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
ssl_binds = bind ${environment-haproxy:host}:${environment-haproxy:ssl_port} ssl crt ${environment-haproxy:ssl_cert}
ssl_socket = ${deployment:run-directory}/ssl-frontend.sock
ssl_socket_owner = os.environ['USER']

# Bind options
haproxy_addr = ${environment-haproxy:host}
haproxy_http_port = ${environment-haproxy:http_port}
haproxy_proxy_port = ${environment-haproxy:proxy_port}
http_port = ${environment-haproxy:http_port}
proxy_port = ${environment-haproxy:proxy_port}
proxy_socket = ${deployment:run-directory}/ssl-frontend.sock
proxy_socket_owner = os.environ['USER']
extra_binds = #

default_backend = static_backend

# The trailing comment matters; see developer_zeo_conf
haproxy_backend_port_rewrite = #

# If we have additional incoming hosts that
# define SSL traffic, such as a front-end proxy,
# list them here. Each line is of the form
# acl is_ssl RULE. Be careful with this.
# To match all incoming traffic, assuming that
# ssl is always the case, you can use something like this:
#       acl is_ssl so_id ${environment-haproxy:http_port}
haproxy_addl_ssl_acls =

# Read from easily-updated files the IP addressess
# we want to block. See http://www.ip2location.com/free/visitor-blocker
# Haproxy has a 2K limit on the length of a line, which
# a few of these exceed if we try to list them all at once, so we break
# them up
ip_blacklist =
    ''.join([
		''.join([x.strip() + '\t\tis_blocked_backend' + os.linesep for x in open('templates/etc/haproxy/'+the_file, 'rU').readlines()])
		for the_file in ('spoof-cidr.txt',
						 'burma-myanmar-cidr.txt',
						 'cuba-cidr.txt',
						 'iran-cidr.txt',
						 'northkorea-cidr.txt',
						 'sudan-cidr.txt',
						 'syria-cidr.txt')])

rproxy_map = 
	/google		s3_backend
	/app		node_backend
	/login/		node_backend
	/mobile		node_backend
	/content		content_backend
	/hosted_badge_images		content_backend
	/_debug_toolbar		data_backend
	/dataserver		data_backend
	/_ops		data_backend
	/socket.io		data_backend
	/library		data_backend
	/dictionary		data_backend

# Set this to 'accept-proxy' if a frontend will
# also be haproxy; then it should use send-proxy in its
# server line and this will obviate the need for server-close
# to get x-forwarded-for. This is REQUIRED for recent versions of the server.
haproxy_http_accept_proxy =

# HAproxy stats on a unix socket. See
# http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.2
haproxy_stats_socket = ${deployment:run-directory}/haproxy.sock

# Extra HAProxy frontend rules
haproxy_extra_config = #

# Extra HAProxy frontend redirects
haproxy_extra_redirects = #

hostname = ${environment:global_host_name}

# TODO: There are recipes that enumerate other sections; we
# probably want to use those here to avoid having to
# manually list out all server ips again. Alternatively,
# our own meta recipe.

reverse_proxy_servers =
    server tcp ${:haproxy_addr}:${:proxy_port} send-proxy

nginx_servers =
			server nginx 127.0.0.1:${nginx-conf:nginx_proxy_port} weight 1 send-proxy

content_servers =
			server content 127.0.0.1:${nginx-conf:nginx_proxy_port} weight 1 send-proxy

# gunicorn >= 19.x REQUIRES the send-proxy setting
dataserver_servers =
			server dataserver 127.0.0.1:${environment-dataserver:http_port} observe layer7 weight 1 send-proxy

render_servers =
			server render 127.0.0.1:${environment-dataserver:http_port} observe layer7 weight 1 send-proxy

nodejs_servers =
			server nodejs 127.0.0.1:${environment:nodejs_http_port} observe layer7 weight 1 send-proxy

widget_servers =
			server widget 127.0.0.1:${environment:widget_http_port} observe layer7 weight 1 send-proxy

