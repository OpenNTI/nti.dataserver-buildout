global
    log 127.0.0.1 daemon warning
    # Total Max Connections. This is dependent on ulimit.
    maxconn ${maxconn}

    stats socket ${haproxy_stats_socket} mode 600 level admin
    stats timeout 2m

    ${extra_globals}

defaults
    maxconn ${maxconn}

    timeout queue 5s
    timeout server 15m
    timeout client 15m
    timeout connect 60s
    timeout tunnel 15m
    errorfile 408 /dev/null

    ${extra_defaults}

listen ssl-term
    mode http
    ${ssl_binds}

    # Let gunicorn/nginx know if we are dealing with an incoming HTTPS request
    # (This is a default 'secure-header' in gunicorns conf)
    # If we fail do do this, the server cannot correctly generate
    # absolute URLs, and that includes the wss:// URLs used for
    # websockets (and Safari 6 at least, has a problem if the server
    # returns a ws:// URL over SSL; Chrome doesn't care)
    reqidel ^X-FORWARDED-PROTOCOL:.*
    reqadd X-FORWARDED-PROTOCOL:\ ssl if { ssl_fc }

    ${reverse_proxy_servers}

frontend all
    mode http
    log global
    timeout client 86400000
    option httplog

    # TCP Port for Proxy Protocol connections
    bind ${haproxy_addr}:${proxy_port} id ${proxy_port} accept-proxy

    # Port for admin and dev connections over HTTP
    bind ${haproxy_addr}:${http_port} id ${http_port}

    # Additional ports or sockets to bind to
    ${extra_binds}

    default_backend ${default_backend}

    acl is_ssl hdr(X-FORWARDED-PROTOCOL) -i ssl

    acl robots url_sub -i robots.txt robots-dev.txt
    acl google_verification url_beg /google
    acl is_favicon url_sub -i favicon.ico

    acl is_websocket hdr(Upgrade) -i WebSocket
    acl is_websocket hdr_beg(Host) -i ws

    # Block some common attack vectors and private info
    acl is_blocked_name path_end .php .asp .jsp .exe .aspx
    acl is_blocked_name path_end assessment_index.json resources.index
    acl is_blocked_name path_dir .nti_acl indexdir
    http-request deny if is_blocked_name

    # Band-aid for client not auto picking a language file
    redirect location /app/resources/locales/en/LC_MESSAGES/NextThoughtWebApp.js code 302 if { path_beg /app/resources/strings/strings.js }

    ${haproxy_extra_config}

    ${haproxy_extra_redirects}

    # Block incoming IP addresses that are on the blacklist
    use_backend %[src,map_ip(${deployment:etc-directory}/haproxy/ip_blacklist.map)] if { src,map_ip(${deployment:etc-directory}/haproxy/ip_blacklist.map) -m found }

    use_backend static_backend if is_favicon
    use_backend data_backend if is_websocket

    use_backend %[path,map_beg(${deployment:etc-directory}/haproxy/rproxy.map)] if { path,map_beg(${deployment:etc-directory}/haproxy/rproxy.map) -m found }

backend ip_blocked_backend
    # This backend defines no servers,
    # which means using it results in a 503 Service Unavailable.
    # We use that to map that error to a canned response.
    mode http
    errorfile 503 ${deployment:etc-directory|shell-path}/haproxy/blocked.http

${backends}

