#####
### Configuration strategy
# Paste sucks at deployment configuration. It has no support for
# composing configuration information (e.g., includes) and no support
# for default values that can be overridden on the command line
# (see https://bitbucket.org/ianb/pastedeploy/issue/7/).
# Therefore we have no alternative but to make stupid COPIES
# of config files for each machine/scenario.
# Way to go, guys.
# For that reason, we'll try to keep all the stuff you'd want to change
# in the DEFAULT section rather than trying to spread it throughout the file
# and easily miss something.
###
## XXX: NOTE: With the use of buildout, this has finally changed!
## Yay!!!
#####

# Application setup:
# For working with Gunicorn, we define only the main app entry
# point. It is pointed to a dummy app, because preloading does not
# work when combined with threads. The actual true application is hosted in
# the 'pipeline:dataserver_gunicorn' which is loaded manually by gunicorn.py
# in worker processes.

[DEFAULT]
show_exceptions_in_wsgi_errors = ${debug}
the_deploy_root = ${deploy_root|shell-path}
sync_changes = True

[app:dataserver] #nti.appserver.standalone:configure_app
use = egg:nti.dataserver
# Insert filter-with = linesman to enable profiling at /__profiler__
# see http://packages.python.org/linesman/
#filter-with = linesman
nti_create_ds = 1
main_dictionary_path = %(the_deploy_root)s/wiktionary/dict.db
# The site_zcml setting, if defined, is a path to a ZCML file
# loaded after the standard config is loaded
# Deprecated, handled with buildout
#site_zcml = /path/to/site.zcml
#deploy_root = %(deploy_root)s
sync_changes = %(sync_changes)s
# Deprecated, handled with buildout
devmode = ${use_devmode}
# deprecated, handled with buildout
zcml_features = forums
secure_cookies = ${secure_cookies}
cookie_secret = ${cookie_secret}
facebook.app.id = 272442356159055
facebook.app.secret = 964997cea8939ffae988668f6c634f0c

# If this is defined, perfmetrics is active and establishes
# the statsd client stack.
# Note: because this is UDP, even if
# this is not running, it's fine to send to this port
# NOTE2: 'localhost' is ambiguous if the host supports both IPv4 and IPv6.
# (I've seen statsd server choose ipv4 and statsd client choose ipv6)
# choose an IP address to avoid ambiguity
statsd_uri = statsd://127.0.0.1:8125

#pyramid.reload_templates = true

# Application route prefixes
# XXX: TODO: work on this, there's too much
# knowledge spread around
web_app_root = ${webapp_location}
login_app_root = ${loginapp_location}

###
## Purchase email confirmations
# For site policies that load the 'send additional purchase confirmation subscriber',
# these addressess will get the emails.
# A whitespace separated list
###
purchase_additional_confirmation_addresses = ${purchase_additional_confirmation_addresses}


get sync_changes = sync_changes

## pyramid_mailer
mail.host = ${environment:smtp_server}
# port 25 is often blocked by ISPs, use one of the alternates, 465 or 587
mail.port = ${environment:smtp_port}
mail.tls = ${environment:smtp_use_tls}
mail.username = ${environment:smtp_username}
mail.default_sender = ${email_default_from}
mail.debug = 5
mail.password = ${environment:smtp_passwd}
mail.queue_path = ${mail_queue_path}
pyramid.includes = pyramid_mailer

# The debugtoolbar seems to somehow interfere with the extjs app
# "somehow". It's very hard to tell because all exceptions are buried
# It seems the app gets in a cycle reconnecting websockets and
# fails to download the Library. Or something. But the workers wind
# up unresponsive to additional HTTP requests
# As of 2012-10-10, this seems no longer to be the case.
#pyramid.includes = pyramid_debugtoolbar

# AWS cloud search

[filter:linesman]
use = egg:linesman#profiler

[filter:paste_error]
use = egg:Paste#error_catcher
debug = ${debug}
error_email = ${email_error_to}
smtp_server = ${environment:smtp_server}
from_address = ${email_error_from}
smtp_username = ${environment:smtp_username}
smtp_password = ${environment:smtp_passwd}
smtp_use_tls = ${environment:smtp_use_tls}
error_subject_prefix = ${email_error_subject_prefix}


# CORS needs to be outermost so that even 401 errors ond
# exceptions have the chance to get their responses wrapped
[filter:nti_cors]
use = egg:nti.wsgi.cors#cors

[filter:nti_cors_options]
use = egg:nti.wsgi.cors#cors_options

[app:main]
use = egg:nti.dataserver#gunicorn

[pipeline:dataserver_gunicorn]
pipeline =
		 egg:nti.dataserver#ops_ping
		 nti_cors
		 nti_cors_options
		 egg:Paste#gzip
		 paste_error
		 dataserver

[server:main]
use = egg:nti.dataserver#gunicorn
config = ${deployment:etc-directory/gunicorn.conf.py}

# Begin logging configuration

[loggers]
keys = root, dataserver, repoze, plastex, boto

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_dataserver]
level = DEBUG
handlers =
qualname = nti

[logger_repoze]
level = WARNING
handlers =
qualname = repoze

[logger_boto]
level = INFO
handlers =
qualname = boto

[logger_plastex]
level = WARNING
handlers =
qualname = plasTeX

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(thread)d][%(threadName)s] %(message)s
class = zope.exceptions.log.Formatter

# End logging configuration
