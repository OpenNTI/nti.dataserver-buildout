	#need to map the landing cookie.  Can we get this in the location somehow?
	map $http_cookie $site_landing_name {
		default ${default_landing_site_name};
		~nti.landing_site_name=(?<mc>[^\;]+) $mc;
	}

	upstream dataserver {
		server ${nginx_dataserver_port};

		keepalive 16;
	}

	server {
		charset utf-8;

		# All non-debug traffic should come from HAProxy in the PROXY protocol.
		# This is more efficient than communicating over HTTP.
		listen ${nginx-conf:nginx_ip}:${nginx-conf:nginx_proxy_port} proxy_protocol;

		# However for development and debugging there may be a need to bind
		# to additional ports and use other protocols than PROXY.
		${nginx-conf:nginx_extra_binds}

		root   ${nginx_root|shell-path};
		server_name	 ${global_host_name};
		# Don't use our defined server name if we do a redirect;
		# instead use the value the client supplies in the
		# Host header. This is necessary if we are virtual
		# hosting many sites. (TODO: if it's localhost, i.e., we're in
		# dev, we probably do want to force it, so we can better test
		# injected Host headers without monkeying with /etc/hosts)
		server_name_in_redirect off;
		# Redirect to the default port (haproxy), not our local
		# port, which isn't reachable.
		# However, note that in development haproxy will re-insert
		# the port if needed.
		port_in_redirect off;

		proxy_http_version 1.1;
		etag on;
		if_modified_since before;
		lingering_close on;

		set_real_ip_from 192.168.0.0/24;
		set_real_ip_from 10.50.0.0/16;
		set_real_ip_from 172.16.48.0/22;
		set_real_ip_from 127.0.0.1;
		set_real_ip_from unix:;
		real_ip_recursive on;
		real_ip_header proxy_protocol;

		location = /_ops/ping {
			return 204;
		}

		location /this/should/not/exist.html {
			error_page 404 =503 /maintenance/index.html;
		}

		error_page 404 = /404.html;
		location = /404.html {
			alias ${nginx-conf:environment_support_path}/dist/404.html;
			internal;
		}

		location = / {
			# haproxy is redirecting to ${nginx-conf:webapp_location} if the root
			# gets hit and we could be authenticated. This makes it hard
			# to get back to the landing content, if any. So we redirect
			# (unauthenticated) hits of the root to be directly to
			# /index.html (which we handle with the block below), letting
			# the back button work as expected.
			return 302 $uri_scheme://$host/index.html;
		}

		location  / {
			root ${sites_basedir}/landing/$host;
			index  index.html index.htm;
			expires +1h;
			add_header Cache-Control proxy-revalidate;
		}

		location = /index.html {
			root ${sites_basedir}/landing/$host;
			expires +1h;
			add_header Cache-Control proxy-revalidate;
			try_files $uri $uri/ @login;
		}

		location = /favicon.ico {
			root ${sites_basedir}/$host/shared/;
			try_files $uri @default_favicon;
		}

		location @default_favicon {
			root ${default_site_assets}/dist/shared/;
			internal;
		}

		location = /robots.txt {
			alias ${nginx-conf:environment_support_path}/dist/${nginx-conf:robots_file};
		}

		location /site-assets/ {
			alias ${sites_basedir}/$host/;
			try_files $uri @default_site_assets;
		}

		location @default_site_assets {
			rewrite /site-assets(/.*) $1;
			internal;
		}

		location /vendor/ {
			alias ${nginx-conf:vendor_lib_path}/;
		}

		location = /loginsuccess {
			# On a successful login, the login app will redirect
			# here by default (see defaults.js). We then
			# redirect to the app; this keeps the coupling minimal
			return 302 $uri_scheme://$host${nginx-conf:webapp_location};
		}

		location @login {
			return 302 $uri_scheme://$host/login/;
		}

		location @error {
			return 404;
		}

##### Content rules ####
		location ${nginx-conf:global_content_location} {
			alias ${nginx-conf:global_content_directory/.|shell-path}/;
			auth_request /_ops/identify;
			location ~* ${nginx-conf:global_content_location}(.*\.(png|jpg|jpeg|svg|gif)) {
				auth_request off;
			}
		}

		location ${nginx-conf:hosted_badge_images_location} {
			alias ${nginx-conf:hosted_badge_images_directory/.|shell-path}/;
		}
		
		location = /_ops/identify {
			proxy_pass http://dataserver/_ops/identify;
			proxy_set_header Connection "";
			proxy_http_version 1.1;
			proxy_pass_request_body off;
			proxy_set_header Content-Length "";
		}
#### ******** ####

##### Legacy mobile app rules ####
		location = /mobile/resources/css/sites/current/site.css {
			return 301 $uri_scheme://$host/site-assets/mobileapp/site.css;
		}

		location = /mobile/resources/images/favicon.ico {
			return 301 $uri_scheme://$host/favicon.ico;
		}
#### ******** ####

##### Legacy web app rules ####
		location ${nginx-conf:webapp_location}resources/css/site.css {
			return 301 $uri_scheme://$host/site-assets/webapp/site.css;
		}

		location ${nginx-conf:webapp_location}resources/strings/site.js {
			return 301 $uri_scheme://$host/site-assets/webapp/strings.js;
		}

		location = ${nginx-conf:webapp_location}resources/images/favicon.ico {
			return 301 $uri_scheme://$host/favicon.ico;
		}
#### ******** ####

##### Legacy login app rules ####
		location = ${nginx-conf:loginapp_location}resources/css/site.css {
			return 301 $uri_scheme://$host/site-assets/loginapp/site.css;
		}

		location = ${nginx-conf:loginapp_location}resources/strings/site.js {
			return 301 $uri_scheme://$host/site-assets/loginapp/strings.js;
		}

		location = ${nginx-conf:loginapp_location}resources/favicon.ico {
			return 301 $uri_scheme://$host/favicon.ico;
		}
#### ******** ####

		# deny access to .htaccess files, if Apache's document root
		# concurs with nginx's one
		#
		location ~ /\.ht {
			deny  all;
		}

		# shutdown .svn and .git, apperantly 
		location ~ /\.svn/ {
			deny all;
		}

		location ~ /\.git/ {
			deny all;
		}

		# Additional custom configuration below
		${nginx_extra_server_config}

	}
