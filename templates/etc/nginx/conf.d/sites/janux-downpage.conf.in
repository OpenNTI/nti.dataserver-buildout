	server {
		charset utf-8;

		# All non-debug traffic should come from HAProxy in the PROXY protocol.
		# This is more efficient than communicating over HTTP.
		listen ${nginx-conf:nginx_ip}:${nginx-conf:nginx_proxy_port} proxy_protocol;

		# However for development and debugging there may be a need to bind
		# to additional ports and use other protocols than PROXY.
		${nginx-conf:nginx_extra_binds}

		root   ${root_path|shell-path};
		server_name	 ${global_host_name};
		# Don't use our defined server name if we do a redirect;
		# instead use the value the client supplies in the
		# Host header. This is necessary if we are virtual
		# hosting many sites. (TODO: if it's localhost, i.e., we're in
		# dev, we probably do want to force it, so we can better test
		# injected Host headers without monkeying with /etc/hosts)
		server_name_in_redirect off;
		# Redirect to the default port (haproxy), not our local
		# port, which isn't reachable.
		# However, note that in development haproxy will re-insert
		# the port if needed.
		port_in_redirect off;

		proxy_http_version 1.1;
		etag on;
		if_modified_since before;
		lingering_close on;

		set_real_ip_from 192.168.0.0/24;
		set_real_ip_from 10.50.0.0/24;
		set_real_ip_from 10.50.8.0/24;
		set_real_ip_from 127.0.0.1;
		set_real_ip_from unix:;
		real_ip_recursive on;
		real_ip_header proxy_protocol;

		location /this/should/not/exist.html {
			error_page 404 =503 /maintenance/index.html;
		}

		location = / {
			# haproxy is redirecting to ${webapp_location} if the root
			# gets hit and we could be authenticated. This makes it hard
			# to get back to the landing content, if any. So we redirect
			# (unauthenticated) hits of the root to be directly to
			# /index.html (which we handle with the block below), letting
			# the back button work as expected.
			return 302 $uri_scheme://$host/index.html;
		}

		location  / {
			index  index.html index.htm;
			root ${root_path|shell-path}/;
			expires +1h;
			add_header Cache-Control proxy-revalidate;
			try_files $uri $uri/ @error;
		}

		location @login {
			return 302 $uri_scheme://$host/maintenance/index.html;
		}

		location @error {
			return 404;
		}

		location /widgets/gifting/ {
			return 302 $uri_scheme://$host/maintenance/index.html;
		}

		location /dataserver2 {
			return 302 $uri_scheme://$host/maintenance/index.html;
		}

		location /mobile {
			return 302 $uri_scheme://$host/maintenance/index.html;
		}

		location ${webapp_location} {
			return 302 $uri_scheme://$host/maintenance/index.html;
		}

		location ${global_content_location} {
			return 302 $uri_scheme://$host/maintenance/index.html;
		}

		location ${loginapp_location} {
			return 302 $uri_scheme://$host/maintenance/index.html;
		}

		# deny access to .htaccess files, if Apache's document root
		# concurs with nginx's one
		#
		location ~ /\.ht {
			deny  all;
		}

		# shutdown .svn and .git, apperantly 
		location ~ /\.svn/ {
			deny all;
		}

		location ~ /\.git/ {
			deny all;
		}

	}
