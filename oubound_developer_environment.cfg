# A buildout useful for developers working on the oubound
# project.  Comprises a core dataserver environment built on,
# zeo, testing resources, and oubound resources
[buildout]
extends =
		haproxy_nginx_environment.cfg
		zeo_environment.cfg
		hypatia.cfg
		oubound.cfg

# NOTE: When extending multiple base configs,
# only the parts from the bottom config are
# installed by default (even if they all use 'parts +=').
# So if we want to install parts from both configs,
# we need to explicitly list them.
parts +=
		openssl
		haproxy
		ssl-cert
		nginx
		nginx-conf
		haproxy-conf
		memcached

[extra-sources]
z3c.recipe.sphinxdoc = git https://github.com/NextThought/z3c.recipe.sphinxdoc.git
nti.nose_traceback_info = git https://github.com/NextThought/nti.nose_traceback_info.git
nti.app.testing = svn https://repos.nextthought.com/svn/nti-svn/nti.app.testing/trunk

[eggs]
dataserver_egg = nti.dataserver[tools,test]
# If you want to test buildout recipes that use install_develop
# for themselves, they must be included in the eggs
eggs +=
	nti.nose_traceback_info
	nti.app.testing
	nti.recipes.zcml
	elpy
	linesman
	uncommitted
	nose2
	nose2-cov
	zope.testrunner
	zope.app.apidoc
	zope.app.zcmlfiles
	zope.app.authentication
	zope.app.securitypolicy
	${oubound-ALL-eggs:eggs}

# These later give us a command that can be used to document code
# and, more importantly, registered utilities:
#   static-apidoc -v 1 -b -l -p /tmp/apidoc
# It takes some minor surgery to zope.app.apidoc.bookmodule (to remove
# things that aren't there anymore) and zape.app.apidoc.configure.zcml
# (to load nti.appserver and provide a feature so we don't conflict)

# We would like to be able to use zope.testrunner for its robust
# support of layers, auto-coverage, profiling, memory leak support,
# etc. But it's fatal flaw, compared to nose, is that it doesn't
# support test functions (or test generators); it only supports test
# methods inside test classes, and it doesn't support setUpClass
# fixtures (the preference is for layers). Until we eliminate those,
# we're stuck with nose or nose2.

# nose2 supports layers, but notice that layers require test classes
# (not test functions) so transitioning to layers is naturally
# a transition to zope.testrunner too...nose2 is transitional.
# Unfortunately, nose2 at 0.4.7 (release version as-of 2014-02-19)
# has a bad constraint on six, so we must check it out

[testrunner]
recipe = zc.recipe.testrunner
eggs =
		${eggs:dataserver_egg}
		nti.app.client_preferences
		nti.assessment
		nti.app.testing
		nti.testing
	    nti.app.hypatia
		nti.hypatia

# Because 'test' is a reserved word in the shell,
# so you would have to give a full path
script = ztest
defaults = ['-p', '--auto-color', '-v']

[zcml]
package_features +=
				devmode
				dscoreonly

[nginx-conf]
nginx_daemon = off
nginx_max_open_files = 1000

[haproxy-conf]
haproxy_backend_port_rewrite =
	# Did the incoming Host header have a port in it? If so,
	# we will want to rewrite outgoing Location headers from nginx to
	# have the right port...nginx would put its own port in if we let
	# it, which is not right for any scenario; turning them off entirely
	# works for production when we are on the default ports, but fails
	# badly for development when we're not.
	# Our stunnel socket is always SSL, and is the only thing that is in development
	acl is_ssl so_id 42

	rspirep ^Location:\ http://([^0-9/].*?)/(.*) Location:\ http://\1:${environment:haproxy_http_port}/\2 unless is_ssl
	rspirep ^Location:\ .*://([^0-9/].*?)/(.*) Location:\ https://\1:${environment-haproxy:ssl_port}/\2 if is_ssl

[init_env]
# For development, install the initial test data and users
args = --with-example

[environment]
cache_servers = localhost:${memcached-conf:memcached-port}
#tweak global content location for ease of running next to normal platform dataserver
global_content_directory = ${buildout:directory}/../OUBoundGlobalLibrary

[pserve-conf]
use_devmode = 1
secure_cookies = 0
debug_error_in_html = true
cookie_secret = devmode cookie secret
session_cookie_secret = devmode session cookie secret
pyramid_includes = pyramid_debugtoolbar

[gunicorn-conf]
# Make it easy to debug by using one worker
# and not preloading
workers = 1
preload_app = False

[supervisor]
pserve_group_programs = pserve,hypatia,metadata
programs +=
		1 nginx ${deployment:bin-directory}/nginx
		1 haproxy ${deployment:bin-directory}/haproxy [-f ${deployment:etc-directory}/haproxy/haproxy.cfg -db]
		${memcached-conf:memcached-supervisor}
		99 hypatia ${deployment:bin-directory}/nti_hypatia_indexer [-v -m ${hypatia-conf:mintime} -x ${hypatia-conf:maxtime} -l ${hypatia-conf:limit}]

# Turn these off for developers since they don't do
# any good, and they probably don't work anyway
[crashmail_pserve]
supervisor =

[fatalmail]
supervisor =

# We don't need any of the webapp-conf files to be copied over.  That probably
# means those need to move up out of base_environment.cfg
[webapp-conf]
files=
