# A buildout for setting up and running
# integration test suite.
[buildout]
extends =
		xapi.cfg
		sphinxdoc.cfg
		zeo_environment.cfg
		analytics.cfg
		ims.cfg
		credit.cfg
		badges.cfg
		solr.cfg
		calendar.cfg
		invitations.cfg
		presentation.cfg
		contentrendering.cfg
		courseware_content.cfg

relative-paths = false

parts -=
	  omelette
	  redis
	  python_ldap
	  openssl
	  haproxy
	  nginx
	  nginx-conf
	  memcached
	  imagemagick
	  libjpeg
	  libpng
	  pillow

parts +=
	  phantomjs
	  z3c_sphinxdoc
	  nti_xmltest
	  invitations-signer-conf

[passwords]
# TODO: TEST
file = dev_passwords.pass.cast5

# Somewhat often we hit the threading bug that
# locks the system up during integration testing,
# preventing it from running. Also, all the simultaneous
# checkouts sometimes make our SVN server complain...
# UPDATE: Hold off on that, we just seem to have a really
# terrible Internet connection while testing this
# mr.developer-threads = 1

[courseware-ALL-sources]
<=	invitations-ALL-sources
	presentation-ALL-sources
	courseware-content-ALL-sources

[site-sources]
<= site-ALL-sources

[solr-sources]
<= solr-ALL-sources

[product-sources]
<= product-ALL-sources
   xapi-ALL-sources

[credit-sources]
<= credit-ALL-sources

[calendar-sources]
<= calendar-ALL-sources

[badges-sources]
<= badges-ALL-sources

[extra-sources]
nti.app.testing = svn https://repos.nextthought.com/svn/nti-svn/nti.app.testing/trunk
nti.integrationtests = svn https://repos.nextthought.com/svn/nti-svn/nti.integrationtests/trunk

[eggs]
dataserver_egg = nti.dataserver[tools,test]
eggs +=
	 tox
	 ${site-ALL-eggs:eggs}
	 ${product-ALL-eggs:eggs}
	 ${analytics-ALL-eggs:eggs}
	 ${badges-ALL-eggs:eggs}
	 nti.recipes.zcml
	 nti.integrationtests
	 z3c.recipe.sphinxdoc
	 nose2
	 nose2-cov
	 zope.testrunner
	 collective.xmltestreport
	 ${solr-ALL-eggs:eggs}
	 ${credit-ALL-eggs:eggs}
	 ${calendar-ALL-eggs:eggs}
	 ${invitations-ALL-eggs:eggs}
	 ${contentrendering-MAIN-eggs:eggs}
	 ${xapi-ALL-eggs:eggs}
	 ${courseware-content-ALL-eggs:eggs}

initialization +=
			   os.environ['PATH'] = "${deployment:root-directory}/parts/phantomjs/bin" + os.pathsep + os.environ['PATH']

# We would like to pick up some of the things
# from contentrendering.cfg, notably phantomjs;
# but if we try, we also recompile imagemagick every
# time, which is far too slow. I didn't find a way to factor
# out initialization and part code such that it could
# be made to happen; therefore, we have our own copy.
# The test machine must supply its own install of
# imagemagick and latex.

[phantomjs]
recipe = hexagonit.recipe.download
url = https://s3.amazonaws.com/dev.nextthought.com/phantomjs-2.0.0-development-macosx-201501031642.zip
strip-top-level-dir = true
excludes =
         examples
         README.md
         third-party.txt

[deployment]
root-directory = ${buildout:root-directory}

[environment]
global_content_directory = /Library/WebServer/Documents

[pserve-conf]
http-port = 62543
use_devmode = 1
secure_cookies = 0

[gunicorn-conf]
# Use a controlled number of workers rather than
# auto-calc for ease of debugging and reproduction.
# But use more than one to test concurrency
workers = 2

[init_env]
args = --with-example

[redis-conf]
redis-path = /opt/local/bin/redis-server

[zcml]
package_features +=
				 devmode
				 testmode

[supervisor]
# Turn off email of crashes
eventlisteners =

[versions]
nltk = 3.2.5

[testrunner]
recipe = collective.xmltestreport
eggs =
	${base-eggs:eggs}
	${eggs:eggs}
	nti.recipes.zodb
	nti.recipes.passwords
	nti.recipes.json
initialization = ${eggs:initialization}

# Because 'test' is a reserved word in the shell,
# so you would have to give a full path
script = ztest
defaults = ['--auto-color', '-v', '-p']

[nti_xmltest]
recipe = collective.xmltestreport
eggs =
	${base-eggs:eggs}
	${eggs:eggs}
	nti.recipes.zodb
	nti.recipes.passwords
	nti.recipes.json
initialization = ${eggs:initialization}

defaults = ['--auto-color', '-v', '-p']
