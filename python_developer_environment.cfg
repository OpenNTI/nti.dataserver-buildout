# A build out useful for developers working
# on the backend code
[buildout]
extends =
		sphinxdoc.cfg
		developer_zeo_environment.cfg

parts +=
		z3c_sphinxdoc
		testrunner
		nti_xmltest

[extra-sources]
nti.app.testing = svn https://repos.nextthought.com/svn/nti-svn/nti.app.testing/trunk
nti.integrationtests = svn https://repos.nextthought.com/svn/nti-svn/nti.integrationtests/trunk

[zope-app-ALL-eggs]
eggs=
	zope.app.apidoc
	zope.app.zcmlfiles
	zope.app.authentication

[testing-ALL-eggs]
eggs=
	nose2
	nose2-cov
	zope.testrunner
	nti.app.testing
	collective.xmltestreport

[eggs]
dataserver_egg = nti.dataserver[tools,test]
# If you want to test buildout recipes that use install_develop
# for themselves, they must be included in the eggs
eggs +=
		elpy
		linesman
		uncommitted
		nti.recipes.zcml
		${testing-ALL-eggs:eggs}
		${zope-app-ALL-eggs:eggs}

# These later give us a command that can be used to document code
# and, more importantly, registered utilities:
#   static-apidoc -v 1 -b -l -p /tmp/apidoc
# It takes some minor surgery to zope.app.apidoc.bookmodule (to remove
# things that aren't there anymore) and zape.app.apidoc.configure.zcml
# (to load nti.appserver and provide a feature so we don't conflict)

# We would like to be able to use zope.testrunner for its robust
# support of layers, auto-coverage, profiling, memory leak support,
# etc. But it's fatal flaw, compared to nose, is that it doesn't
# support test functions (or test generators); it only supports test
# methods inside test classes, and it doesn't support setUpClass
# fixtures (the preference is for layers). Until we eliminate those,
# we're stuck with nose or nose2.

# nose2 supports layers, but notice that layers require test classes
# (not test functions) so transitioning to layers is naturally
# a transition to zope.testrunner too...nose2 is transitional.
# Unfortunately, nose2 at 0.4.7 (release version as-of 2014-02-19)
# has a bad constraint on six, so we must check it out

[testrunner]
recipe = collective.xmltestreport
eggs =
	${base-eggs:eggs}
	${eggs:eggs}
	nti.recipes.zodb
	nti.recipes.passwords
	nti.recipes.json
initialization = ${eggs:initialization}

# Because 'test' is a reserved word in the shell,
# so you would have to give a full path
script = ztest
defaults = ['--auto-color', '-v', '-p']

[nti_xmltest]
recipe = collective.xmltestreport
eggs =
	${base-eggs:eggs}
	${eggs:eggs}
	nti.recipes.zodb
	nti.recipes.passwords
	nti.recipes.json
initialization = ${eggs:initialization}

defaults = ['--auto-color', '-v', '-p']
