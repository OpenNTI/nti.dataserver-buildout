# A build out useful for developers working
# on the backend code
[buildout]
extends =
		sphinxdoc.cfg
		developer_zeo_environment.cfg
		phantomjs.cfg
		imagemagick.cfg
		contentrendering.cfg

parts +=
		omelette
		z3c_sphinxdoc
		senchacmd
		compass
		phantomjs
		imagemagick
#		grunt
# 		bower
#		nodeserver-env
#		nodeserver
		app-minify
		ext42-link
		loginapp-file-links
		webapp-file-links
		testrunner

[environment]
# Because of the order of inclusion, we need this here
webapp_path = ${buildout:sources-dir}/nti.web.app
loginapp_path = ${buildout:sources-dir}/NextThoughtLoginApp

[extra-sources]
z3c.recipe.sphinxdoc = git https://github.com/NextThought/z3c.recipe.sphinxdoc.git
nti.nose_traceback_info = git https://github.com/NextThought/nti.nose_traceback_info.git
nti.testing = git https://github.com/NextThought/nti.testing.git
nti.app.testing = svn https://repos.nextthought.com/svn/nti-svn/nti.app.testing/trunk
nti.integrationtests = svn https://repos.nextthought.com/svn/nti-svn/nti.integrationtests/trunk

[eggs]
dataserver_egg = nti.dataserver[tools,test]
# If you want to test buildout recipes that use install_develop
# for themselves, they must be included in the eggs
eggs +=
		nti.nose_traceback_info
		nti.testing
		nti.app.testing
		nti.recipes.zcml
		elpy
		linesman
		uncommitted
		nose2
		nose2-cov
		zope.testrunner
		nti.contentrendering
		nti.contentrendering_assessment	
		nti.app.products.courseware
		nti.app.products.coursewarereports
		zope.app.apidoc
		zope.app.zcmlfiles
		zope.app.authentication
		zope.app.securitypolicy

# These later give us a command that can be used to document code
# and, more importantly, registered utilities:
#   static-apidoc -v 1 -b -l -p /tmp/apidoc
# It takes some minor surgery to zope.app.apidoc.bookmodule (to remove
# things that aren't there anymore) and zape.app.apidoc.configure.zcml
# (to load nti.appserver and provide a feature so we don't conflict)

# We would like to be able to use zope.testrunner for its robust
# support of layers, auto-coverage, profiling, memory leak support,
# etc. But it's fatal flaw, compared to nose, is that it doesn't
# support test functions (or test generators); it only supports test
# methods inside test classes, and it doesn't support setUpClass
# fixtures (the preference is for layers). Until we eliminate those,
# we're stuck with nose or nose2.

# nose2 supports layers, but notice that layers require test classes
# (not test functions) so transitioning to layers is naturally
# a transition to zope.testrunner too...nose2 is transitional.
# Unfortunately, nose2 at 0.4.7 (release version as-of 2014-02-19)
# has a bad constraint on six, so we must check it out

[testrunner]
recipe = zc.recipe.testrunner
eggs =
		${eggs:dataserver_egg}
		nti.app.assessment
		nti.app.client_preferences
		nti.assessment
		nti.app.contenttypes.presentation
		nti.contenttypes.courses
		nti.app.testing
		nti.testing
		nti.app.hypatia
		nti.hypatia
		nti.plasTeX
		${site-ALL-eggs:eggs}
		${product-ALL-eggs:eggs}
		${rendering-ALL-eggs:eggs}

# Because 'test' is a reserved word in the shell,
# so you would have to give a full path
script = ztest
defaults = ['-p', '--auto-color', '-v']
